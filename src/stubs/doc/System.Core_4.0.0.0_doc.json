{
  "Internal": {
    "doc": "",
    "Cryptography": {
      "doc": "",
      "BasicSymmetricCipher": {
        "doc": "",
        "doc_formatted": {},
        "BlockSizeInBytes": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Transform(System:Array[System:Byte], System:Int32, System:Int32, System:Array[System:Byte], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "input": "",
            "inputOffset": "",
            "count": "",
            "output": "",
            "outputOffset": ""
          },
          "return": ""
        },
        "TransformFinal(System:Array[System:Byte], System:Int32, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "input": "",
            "inputOffset": "",
            "count": ""
          },
          "return": ""
        }
      },
      "BasicSymmetricCipherBCrypt": {
        "doc": "",
        "doc_formatted": {},
        "__init__(Microsoft.Win32.SafeHandles:SafeBCryptAlgorithmHandle, System.Security.Cryptography:CipherMode, System:Int32, System:Array[System:Byte], System:Array[System:Byte], System:Boolean)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "algorithm": "",
            "cipherMode": "",
            "blockSizeInBytes": "",
            "key": "",
            "iv": "",
            "encrypting": ""
          }
        }
      },
      "BasicSymmetricCipherNCrypt": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System:Func[System.Security.Cryptography:CngKey], System.Security.Cryptography:CipherMode, System:Int32, System:Array[System:Byte], System:Boolean)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "cngKeyFactory": "",
            "cipherMode": "",
            "blockSizeInBytes": "",
            "iv": "",
            "encrypting": ""
          }
        }
      },
      "CngSymmetricAlgorithmCore": {
        "doc": "",
        "doc_formatted": {},
        "__init__(Internal.Cryptography:ICngSymmetricAlgorithm)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "outer": ""
          }
        },
        "__init__(Internal.Cryptography:ICngSymmetricAlgorithm, System:String, System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngKeyOpenOptions)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "outer": "",
            "keyName": "",
            "provider": "",
            "openOptions": ""
          }
        },
        "CreateDecryptor()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "CreateDecryptor(System:Array[System:Byte], System:Array[System:Byte])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "rgbKey": "",
            "rgbIV": ""
          },
          "return": ""
        },
        "CreateEncryptor()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "CreateEncryptor(System:Array[System:Byte], System:Array[System:Byte])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "rgbKey": "",
            "rgbIV": ""
          },
          "return": ""
        },
        "GenerateIV()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "GenerateKey()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "GetKeyIfExportable()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "SetKey(System:Array[System:Byte])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "key": ""
          }
        },
        "SetKeySize(System:Int32, Internal.Cryptography:ICngSymmetricAlgorithm)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "keySize": "",
            "outer": ""
          }
        }
      },
      "CryptoThrowHelper": {
        "doc": "",
        "doc_formatted": {},
        "ToCryptographicException(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "hr": ""
          },
          "return": ""
        }
      },
      "Helpers": {
        "doc": "",
        "doc_formatted": {},
        "BitSizeToByteSize(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "bits": ""
          },
          "return": ""
        },
        "CloneByteArray(System:Array[System:Byte])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "src": ""
          },
          "return": ""
        },
        "GenerateRandom(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "count": ""
          },
          "return": ""
        },
        "GetCipherIv(System.Security.Cryptography:CipherMode, System:Array[System:Byte])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "cipherMode": "",
            "iv": ""
          },
          "return": ""
        },
        "IsLegalSize(System:Int32, System:Array[System.Security.Cryptography:KeySizes])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "size": "",
            "legalSizes": ""
          },
          "return": ""
        },
        "ToCryptographicException(Interop.NCrypt.ErrorCode)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "errorCode": ""
          },
          "return": ""
        },
        "UsesIv(System.Security.Cryptography:CipherMode)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "cipherMode": ""
          },
          "return": ""
        }
      },
      "ICngSymmetricAlgorithm": {
        "doc": "",
        "doc_formatted": {},
        "BaseKey": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "BaseKeySize": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "BlockSize": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "IV": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "LegalKeySizes": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Mode": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Padding": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "GetEphemeralModeHandle()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "GetNCryptAlgorithmIdentifier()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "IsWeakKey(System:Array[System:Byte])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "key": ""
          },
          "return": ""
        }
      },
      "KeyPropertyName": {
        "doc": "",
        "doc_formatted": {}
      },
      "SymmetricImportExportExtensions": {
        "doc": "",
        "doc_formatted": {},
        "GetSymmetricKeyDataIfExportable(System.Security.Cryptography:CngKey, System:String)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "cngKey": "",
            "algorithm": ""
          },
          "return": ""
        },
        "ToCngKey(System:Array[System:Byte], System:String)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "key": "",
            "algorithm": ""
          },
          "return": ""
        }
      },
      "UniversalCryptoDecryptor": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Security.Cryptography:PaddingMode, Internal.Cryptography:BasicSymmetricCipher)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "paddingMode": "",
            "basicSymmetricCipher": ""
          }
        }
      },
      "UniversalCryptoEncryptor": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Security.Cryptography:PaddingMode, Internal.Cryptography:BasicSymmetricCipher)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "paddingMode": "",
            "basicSymmetricCipher": ""
          }
        }
      },
      "UniversalCryptoTransform": {
        "doc": "",
        "doc_formatted": {},
        "Create(System.Security.Cryptography:PaddingMode, Internal.Cryptography:BasicSymmetricCipher, System:Boolean)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "paddingMode": "",
            "cipher": "",
            "encrypting": ""
          },
          "return": ""
        }
      }
    }
  },
  "Microsoft": {
    "doc": "",
    "Win32": {
      "doc": "",
      "SafeLibraryHandle": {
        "doc": "",
        "doc_formatted": {}
      },
      "UnsafeNativeMethods": {
        "doc": "",
        "doc_formatted": {},
        "WaitNamedPipe(System:String, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "name": "",
            "timeout": ""
          },
          "return": ""
        }
      },
      "SafeHandles": {
        "doc": "",
        "SafeAxlBufferHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeBCryptAlgorithmHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeBCryptHashHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeBCryptKeyHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeCapiHandleBase": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeCapiHashHandle": {
          "doc": "",
          "doc_formatted": {},
          "InvalidHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "SafeCapiKeyHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeCspHandle": {
          "doc": "",
          "doc_formatted": {},
          "Duplicate()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "SafeMemoryMappedFileHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeMemoryMappedViewHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeNCryptHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafeNCryptKeyHandle": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:IntPtr, System.Runtime.InteropServices:SafeHandle)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "handle": "",
              "parentHandle": ""
            }
          }
        },
        "SafeNCryptProviderHandle": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SafeNCryptSecretHandle": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SafePerfProviderHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SafePipeHandle": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:IntPtr, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "preexistingHandle": "",
              "ownsHandle": ""
            }
          }
        }
      }
    }
  },
  "System": {
    "doc": "",
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13, $T14)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": "",
        "arg14": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13, $T14, $T15)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": "",
        "arg14": "",
        "arg15": ""
      }
    },
    "Action($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13, $T14, $T15, $T16)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": "",
        "arg14": "",
        "arg15": "",
        "arg16": ""
      }
    },
    "AppContextDefaultValues": {
      "doc": "",
      "doc_formatted": {},
      "PopulateDefaultValues()": {
        "doc": "",
        "doc_formatted": {},
        "exceptions": {}
      }
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13, $T14)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": "",
        "arg14": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13, $T14, $T15)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": "",
        "arg14": "",
        "arg15": ""
      },
      "return": ""
    },
    "Func($T1, $T2, $T3, $T4, $T5, $T6, $T7, $T8, $T9, $T10, $T11, $T12, $T13, $T14, $T15, $T16)": {
      "doc": "",
      "doc_formatted": {},
      "parameters": {
        "arg1": "",
        "arg2": "",
        "arg3": "",
        "arg4": "",
        "arg5": "",
        "arg6": "",
        "arg7": "",
        "arg8": "",
        "arg9": "",
        "arg10": "",
        "arg11": "",
        "arg12": "",
        "arg13": "",
        "arg14": "",
        "arg15": "",
        "arg16": ""
      },
      "return": ""
    },
    "LocalAppContext": {
      "doc": "",
      "doc_formatted": {},
      "IsSwitchEnabled(System:String)": {
        "doc": "",
        "doc_formatted": {},
        "exceptions": {},
        "parameters": {
          "switchName": ""
        },
        "return": ""
      }
    },
    "LocalAppContextSwitches": {
      "doc": "",
      "doc_formatted": {},
      "AesCryptoServiceProviderDontCorrectlyResetDecryptor": {
        "doc": "",
        "doc_formatted": {},
        "return": ""
      },
      "DontReliablyClonePrivateKey": {
        "doc": "",
        "doc_formatted": {},
        "return": ""
      },
      "SymmetricCngAlwaysUseNCrypt": {
        "doc": "",
        "doc_formatted": {},
        "return": ""
      },
      "UseLegacyFipsThrow": {
        "doc": "",
        "doc_formatted": {},
        "return": ""
      },
      "UseLegacyPublicKeyBehavior": {
        "doc": "",
        "doc_formatted": {},
        "return": ""
      }
    },
    "SR": {
      "doc": "",
      "doc_formatted": {},
      "Resources": {
        "doc": "",
        "doc_formatted": {},
        "return": ""
      },
      "GetObject(System:String)": {
        "doc": "",
        "doc_formatted": {},
        "exceptions": {},
        "parameters": {
          "name": ""
        },
        "return": ""
      },
      "GetString(System:String)": {
        "doc": "",
        "doc_formatted": {},
        "exceptions": {},
        "parameters": {
          "name": ""
        },
        "return": ""
      },
      "GetString(System:String, System:*Boolean)": {
        "doc": "",
        "doc_formatted": {},
        "exceptions": {},
        "parameters": {
          "name": "",
          "usedFallback": ""
        },
        "return": ""
      },
      "GetString(System:String, System:Array[System:Object])": {
        "doc": "",
        "doc_formatted": {},
        "exceptions": {},
        "parameters": {
          "name": "",
          "args": ""
        },
        "return": ""
      }
    },
    "SRCategoryAttribute": {
      "doc": "",
      "doc_formatted": {},
      "__init__(System:String)": {
        "doc": "",
        "doc_formatted": {},
        "parameters": {
          "category": ""
        }
      }
    },
    "SRDescriptionAttribute": {
      "doc": "",
      "doc_formatted": {},
      "__init__(System:String)": {
        "doc": "",
        "doc_formatted": {},
        "parameters": {
          "description": ""
        }
      }
    },
    "Reflection": {
      "doc": "",
      "BlobUtilities": {
        "doc": "",
        "doc_formatted": {},
        "SizeOfGuid": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "ReadBytes(System:Byte, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "buffer": "",
            "byteCount": ""
          },
          "return": ""
        },
        "ReadImmutableBytes(System:Byte, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "buffer": "",
            "byteCount": ""
          },
          "return": ""
        }
      },
      "Throw": {
        "doc": "",
        "doc_formatted": {}
      },
      "PortableExecutable": {
        "doc": "",
        "Characteristics": {
          "doc": "",
          "doc_formatted": {},
          "RelocsStripped": {
            "doc": ""
          },
          "ExecutableImage": {
            "doc": ""
          },
          "LineNumsStripped": {
            "doc": ""
          },
          "LocalSymsStripped": {
            "doc": ""
          },
          "AggressiveWSTrim": {
            "doc": ""
          },
          "LargeAddressAware": {
            "doc": ""
          },
          "BytesReversedLo": {
            "doc": ""
          },
          "Bit32Machine": {
            "doc": ""
          },
          "DebugStripped": {
            "doc": ""
          },
          "RemovableRunFromSwap": {
            "doc": ""
          },
          "NetRunFromSwap": {
            "doc": ""
          },
          "System": {
            "doc": ""
          },
          "Dll": {
            "doc": ""
          },
          "UpSystemOnly": {
            "doc": ""
          },
          "BytesReversedHi": {
            "doc": ""
          }
        },
        "CodeViewDebugDirectoryData": {
          "doc": "",
          "doc_formatted": {},
          "Age": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Guid": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Path": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "CoffHeader": {
          "doc": "",
          "doc_formatted": {},
          "Characteristics": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Machine": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NumberOfSections": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NumberOfSymbols": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PointerToSymbolTable": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfOptionalHeader": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "TimeDateStamp": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "CorFlags": {
          "doc": "",
          "doc_formatted": {},
          "ILOnly": {
            "doc": ""
          },
          "Requires32Bit": {
            "doc": ""
          },
          "ILLibrary": {
            "doc": ""
          },
          "StrongNameSigned": {
            "doc": ""
          },
          "NativeEntryPoint": {
            "doc": ""
          },
          "TrackDebugData": {
            "doc": ""
          },
          "Prefers32Bit": {
            "doc": ""
          }
        },
        "CorHeader": {
          "doc": "",
          "doc_formatted": {},
          "CodeManagerTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EntryPointTokenOrRelativeVirtualAddress": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ExportAddressTableJumpsDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Flags": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MajorRuntimeVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ManagedNativeHeaderDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MetadataDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MinorRuntimeVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ResourcesDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StrongNameSignatureDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "VtableFixupsDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "DebugDirectoryEntry": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:UInt32, System:UInt16, System:UInt16, System.Reflection.PortableExecutable:DebugDirectoryEntryType, System:Int32, System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "stamp": "",
              "majorVersion": "",
              "minorVersion": "",
              "type": "",
              "dataSize": "",
              "dataRelativeVirtualAddress": "",
              "dataPointer": ""
            }
          },
          "DataPointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DataRelativeVirtualAddress": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DataSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsPortableCodeView": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MajorVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MinorVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Stamp": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Type": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "DebugDirectoryEntryType": {
          "doc": "",
          "doc_formatted": {},
          "Unknown": {
            "doc": ""
          },
          "Coff": {
            "doc": ""
          },
          "CodeView": {
            "doc": ""
          },
          "Reproducible": {
            "doc": ""
          },
          "EmbeddedPortablePdb": {
            "doc": ""
          }
        },
        "DirectoryEntry": {
          "doc": "",
          "doc_formatted": {},
          "RelativeVirtualAddress": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Size": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__init__(System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "relativeVirtualAddress": "",
              "size": ""
            }
          }
        },
        "DllCharacteristics": {
          "doc": "",
          "doc_formatted": {},
          "ProcessInit": {
            "doc": ""
          },
          "ProcessTerm": {
            "doc": ""
          },
          "ThreadInit": {
            "doc": ""
          },
          "ThreadTerm": {
            "doc": ""
          },
          "HighEntropyVirtualAddressSpace": {
            "doc": ""
          },
          "DynamicBase": {
            "doc": ""
          },
          "NxCompatible": {
            "doc": ""
          },
          "NoIsolation": {
            "doc": ""
          },
          "NoSeh": {
            "doc": ""
          },
          "NoBind": {
            "doc": ""
          },
          "AppContainer": {
            "doc": ""
          },
          "WdmDriver": {
            "doc": ""
          },
          "TerminalServerAware": {
            "doc": ""
          }
        },
        "Machine": {
          "doc": "",
          "doc_formatted": {},
          "Unknown": {
            "doc": ""
          },
          "I386": {
            "doc": ""
          },
          "WceMipsV2": {
            "doc": ""
          },
          "Alpha": {
            "doc": ""
          },
          "SH3": {
            "doc": ""
          },
          "SH3Dsp": {
            "doc": ""
          },
          "SH3E": {
            "doc": ""
          },
          "SH4": {
            "doc": ""
          },
          "SH5": {
            "doc": ""
          },
          "Arm": {
            "doc": ""
          },
          "Thumb": {
            "doc": ""
          },
          "ArmThumb2": {
            "doc": ""
          },
          "AM33": {
            "doc": ""
          },
          "PowerPC": {
            "doc": ""
          },
          "PowerPCFP": {
            "doc": ""
          },
          "IA64": {
            "doc": ""
          },
          "MIPS16": {
            "doc": ""
          },
          "Alpha64": {
            "doc": ""
          },
          "MipsFpu": {
            "doc": ""
          },
          "MipsFpu16": {
            "doc": ""
          },
          "Tricore": {
            "doc": ""
          },
          "Ebc": {
            "doc": ""
          },
          "Amd64": {
            "doc": ""
          },
          "M32R": {
            "doc": ""
          }
        },
        "PEBinaryReader": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.IO:Stream, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "stream": "",
              "size": ""
            }
          },
          "CurrentOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ReadByte()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadBytes(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "count": ""
            },
            "return": ""
          },
          "ReadInt16()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadInt32()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadNullPaddedUTF8(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "byteCount": ""
            },
            "return": ""
          },
          "ReadUInt16()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadUInt32()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadUInt64()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Seek(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "offset": ""
            }
          }
        },
        "PEHeader": {
          "doc": "",
          "doc_formatted": {},
          "AddressOfEntryPoint": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "BaseOfCode": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "BaseOfData": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "BaseRelocationTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "BoundImportTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CertificateTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CheckSum": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CopyrightTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CorHeaderTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DebugTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DelayImportTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DllCharacteristics": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ExceptionTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ExportTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "FileAlignment": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GlobalPointerTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ImageBase": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ImportAddressTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ImportTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "LoadConfigTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Magic": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MajorImageVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MajorLinkerVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MajorOperatingSystemVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MajorSubsystemVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MinorImageVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MinorLinkerVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MinorOperatingSystemVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MinorSubsystemVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NumberOfRvaAndSizes": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ResourceTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SectionAlignment": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfCode": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfHeaders": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfHeapCommit": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfHeapReserve": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfImage": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfInitializedData": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfStackCommit": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfStackReserve": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfUninitializedData": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Subsystem": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ThreadLocalStorageTableDirectory": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PEHeaders": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.IO:Stream)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peStream": ""
            }
          },
          "__init__(System.IO:Stream, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peStream": "",
              "size": ""
            }
          },
          "__init__(System.IO:Stream, System:Int32, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peStream": "",
              "size": "",
              "isLoadedImage": ""
            }
          },
          "CoffHeader": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CoffHeaderStartOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CorHeader": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CorHeaderStartOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsCoffOnly": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsConsoleApplication": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsDll": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsExe": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MetadataSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MetadataStartOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PEHeader": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PEHeaderStartOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SectionHeaders": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetContainingSectionIndex(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "relativeVirtualAddress": ""
            },
            "return": ""
          },
          "TryGetDirectoryOffset(System.Reflection.PortableExecutable:DirectoryEntry, System:*Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "directory": "",
              "offset": ""
            },
            "return": ""
          }
        },
        "PEMagic": {
          "doc": "",
          "doc_formatted": {},
          "PE32": {
            "doc": ""
          },
          "PE32Plus": {
            "doc": ""
          }
        },
        "PEMemoryBlock": {
          "doc": "",
          "doc_formatted": {},
          "Length": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Pointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetReader()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "GetReader(System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "start": "",
              "length": ""
            },
            "return": ""
          }
        },
        "PEReader": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Collections.Immutable:ImmutableArray[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peImage": ""
            }
          },
          "__init__(System.IO:Stream)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peStream": ""
            }
          },
          "__init__(System.IO:Stream, System.Reflection.PortableExecutable:PEStreamOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peStream": "",
              "options": ""
            }
          },
          "__init__(System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peImage": "",
              "size": ""
            }
          },
          "__init__(System.IO:Stream, System.Reflection.PortableExecutable:PEStreamOptions, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peStream": "",
              "options": "",
              "size": ""
            }
          },
          "__init__(System:Byte, System:Int32, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "peImage": "",
              "size": "",
              "isLoadedImage": ""
            }
          },
          "HasMetadata": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsEntireImageAvailable": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsLoadedImage": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PEHeaders": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetEntireImage()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "GetMetadata()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "GetSectionData(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "relativeVirtualAddress": ""
            },
            "return": ""
          },
          "GetSectionData(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "sectionName": ""
            },
            "return": ""
          },
          "ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable:DebugDirectoryEntry)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "entry": ""
            },
            "return": ""
          },
          "ReadDebugDirectory()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable:DebugDirectoryEntry)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "entry": ""
            },
            "return": ""
          },
          "TryOpenAssociatedPortablePdb(System:String, System:Func[System:String, System.IO:Stream], System.Reflection.Metadata:*MetadataReaderProvider, System:*String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "peImagePath": "",
              "pdbFileStreamProvider": "",
              "pdbReaderProvider": "",
              "pdbPath": ""
            },
            "return": ""
          }
        },
        "PEStreamOptions": {
          "doc": "",
          "doc_formatted": {},
          "Default": {
            "doc": ""
          },
          "LeaveOpen": {
            "doc": ""
          },
          "PrefetchMetadata": {
            "doc": ""
          },
          "PrefetchEntireImage": {
            "doc": ""
          },
          "IsLoadedImage": {
            "doc": ""
          }
        },
        "PEStreamOptionsExtensions": {
          "doc": "",
          "doc_formatted": {},
          "IsValid(System.Reflection.PortableExecutable:PEStreamOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "options": ""
            },
            "return": ""
          }
        },
        "SectionCharacteristics": {
          "doc": "",
          "doc_formatted": {},
          "TypeReg": {
            "doc": ""
          },
          "TypeDSect": {
            "doc": ""
          },
          "TypeNoLoad": {
            "doc": ""
          },
          "TypeGroup": {
            "doc": ""
          },
          "TypeNoPad": {
            "doc": ""
          },
          "TypeCopy": {
            "doc": ""
          },
          "ContainsCode": {
            "doc": ""
          },
          "ContainsInitializedData": {
            "doc": ""
          },
          "ContainsUninitializedData": {
            "doc": ""
          },
          "LinkerOther": {
            "doc": ""
          },
          "LinkerInfo": {
            "doc": ""
          },
          "TypeOver": {
            "doc": ""
          },
          "LinkerRemove": {
            "doc": ""
          },
          "LinkerComdat": {
            "doc": ""
          },
          "MemProtected": {
            "doc": ""
          },
          "NoDeferSpecExc": {
            "doc": ""
          },
          "GPRel": {
            "doc": ""
          },
          "MemFardata": {
            "doc": ""
          },
          "MemSysheap": {
            "doc": ""
          },
          "MemPurgeable": {
            "doc": ""
          },
          "Mem16Bit": {
            "doc": ""
          },
          "MemLocked": {
            "doc": ""
          },
          "MemPreload": {
            "doc": ""
          },
          "Align1Bytes": {
            "doc": ""
          },
          "Align2Bytes": {
            "doc": ""
          },
          "Align4Bytes": {
            "doc": ""
          },
          "Align8Bytes": {
            "doc": ""
          },
          "Align16Bytes": {
            "doc": ""
          },
          "Align32Bytes": {
            "doc": ""
          },
          "Align64Bytes": {
            "doc": ""
          },
          "Align128Bytes": {
            "doc": ""
          },
          "Align256Bytes": {
            "doc": ""
          },
          "Align512Bytes": {
            "doc": ""
          },
          "Align1024Bytes": {
            "doc": ""
          },
          "Align2048Bytes": {
            "doc": ""
          },
          "Align4096Bytes": {
            "doc": ""
          },
          "Align8192Bytes": {
            "doc": ""
          },
          "AlignMask": {
            "doc": ""
          },
          "LinkerNRelocOvfl": {
            "doc": ""
          },
          "MemDiscardable": {
            "doc": ""
          },
          "MemNotCached": {
            "doc": ""
          },
          "MemNotPaged": {
            "doc": ""
          },
          "MemShared": {
            "doc": ""
          },
          "MemExecute": {
            "doc": ""
          },
          "MemRead": {
            "doc": ""
          },
          "MemWrite": {
            "doc": ""
          }
        },
        "SectionHeader": {
          "doc": "",
          "doc_formatted": {},
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NumberOfLineNumbers": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NumberOfRelocations": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PointerToLineNumbers": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PointerToRawData": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PointerToRelocations": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SectionCharacteristics": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SizeOfRawData": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "VirtualAddress": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "VirtualSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "Subsystem": {
          "doc": "",
          "doc_formatted": {},
          "Unknown": {
            "doc": ""
          },
          "Native": {
            "doc": ""
          },
          "WindowsGui": {
            "doc": ""
          },
          "WindowsCui": {
            "doc": ""
          },
          "OS2Cui": {
            "doc": ""
          },
          "PosixCui": {
            "doc": ""
          },
          "NativeWindows": {
            "doc": ""
          },
          "WindowsCEGui": {
            "doc": ""
          },
          "EfiApplication": {
            "doc": ""
          },
          "EfiBootServiceDriver": {
            "doc": ""
          },
          "EfiRuntimeDriver": {
            "doc": ""
          },
          "EfiRom": {
            "doc": ""
          },
          "Xbox": {
            "doc": ""
          },
          "WindowsBootApplication": {
            "doc": ""
          }
        }
      },
      "Metadata": {
        "doc": "",
        "BlobContentId": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Collections.Immutable:ImmutableArray[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "id": ""
            }
          },
          "__init__(System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "id": ""
            }
          },
          "__init__(System:Guid, System:UInt32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "guid": "",
              "stamp": ""
            }
          },
          "Guid": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsDefault": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Stamp": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Reflection.Metadata:BlobContentId)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Reflection.Metadata:BlobContentId)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Reflection.Metadata:BlobContentId, System.Reflection.Metadata:BlobContentId)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Reflection.Metadata:BlobContentId, System.Reflection.Metadata:BlobContentId)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "BlobHandle": {
          "doc": "",
          "doc_formatted": {},
          "IsNil": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "BlobReader": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "buffer": "",
              "length": ""
            }
          },
          "CurrentPointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Length": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Offset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "RemainingBytes": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StartPointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Align(System:Byte)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "alignment": ""
            }
          },
          "IndexOf(System:Byte)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": ""
            },
            "return": ""
          },
          "ReadBlobHandle()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadBoolean()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadByte()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadBytes(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "byteCount": ""
            },
            "return": ""
          },
          "ReadBytes(System:Int32, System:Array[System:Byte], System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "byteCount": "",
              "buffer": "",
              "bufferOffset": ""
            }
          },
          "ReadChar()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadCompressedInteger()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadCompressedSignedInteger()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadDateTime()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadDecimal()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadDouble()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadGuid()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadInt16()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadInt32()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadInt64()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadSByte()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadSingle()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadUInt16()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadUInt32()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadUInt64()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReadUTF16(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "byteCount": ""
            },
            "return": ""
          },
          "ReadUTF8(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "byteCount": ""
            },
            "return": ""
          },
          "Reset()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "TryReadCompressedInteger(System:*Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": ""
            },
            "return": ""
          },
          "TryReadCompressedSignedInteger(System:*Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": ""
            },
            "return": ""
          }
        },
        "DebugMetadataHeader": {
          "doc": "",
          "doc_formatted": {},
          "EntryPoint": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Id": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "Document": {
          "doc": "",
          "doc_formatted": {},
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "DocumentHandle": {
          "doc": "",
          "doc_formatted": {},
          "IsNil": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Reflection.Metadata:DocumentHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Reflection.Metadata:DocumentHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Reflection.Metadata:DocumentHandle, System.Reflection.Metadata:DocumentHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Reflection.Metadata:DocumentHandle, System.Reflection.Metadata:DocumentHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "DocumentNameBlobHandle": {
          "doc": "",
          "doc_formatted": {},
          "IsNil": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Reflection.Metadata:DocumentNameBlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Reflection.Metadata:DocumentNameBlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Reflection.Metadata:DocumentNameBlobHandle, System.Reflection.Metadata:DocumentNameBlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Explicit(System.Reflection.Metadata:BlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "op_Implicit(System.Reflection.Metadata:DocumentNameBlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "op_Inequality(System.Reflection.Metadata:DocumentNameBlobHandle, System.Reflection.Metadata:DocumentNameBlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "Handle": {
          "doc": "",
          "doc_formatted": {},
          "IsNil": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Kind": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Reflection.Metadata:Handle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Reflection.Metadata:Handle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Reflection.Metadata:Handle, System.Reflection.Metadata:Handle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Reflection.Metadata:Handle, System.Reflection.Metadata:Handle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "HandleKind": {
          "doc": "",
          "doc_formatted": {},
          "ModuleDefinition": {
            "doc": ""
          },
          "TypeReference": {
            "doc": ""
          },
          "TypeDefinition": {
            "doc": ""
          },
          "FieldDefinition": {
            "doc": ""
          },
          "MethodDefinition": {
            "doc": ""
          },
          "Parameter": {
            "doc": ""
          },
          "InterfaceImplementation": {
            "doc": ""
          },
          "MemberReference": {
            "doc": ""
          },
          "Constant": {
            "doc": ""
          },
          "CustomAttribute": {
            "doc": ""
          },
          "DeclarativeSecurityAttribute": {
            "doc": ""
          },
          "StandaloneSignature": {
            "doc": ""
          },
          "EventDefinition": {
            "doc": ""
          },
          "PropertyDefinition": {
            "doc": ""
          },
          "MethodImplementation": {
            "doc": ""
          },
          "ModuleReference": {
            "doc": ""
          },
          "TypeSpecification": {
            "doc": ""
          },
          "AssemblyDefinition": {
            "doc": ""
          },
          "AssemblyReference": {
            "doc": ""
          },
          "AssemblyFile": {
            "doc": ""
          },
          "ExportedType": {
            "doc": ""
          },
          "ManifestResource": {
            "doc": ""
          },
          "GenericParameter": {
            "doc": ""
          },
          "MethodSpecification": {
            "doc": ""
          },
          "GenericParameterConstraint": {
            "doc": ""
          },
          "Document": {
            "doc": ""
          },
          "MethodDebugInformation": {
            "doc": ""
          },
          "LocalScope": {
            "doc": ""
          },
          "LocalVariable": {
            "doc": ""
          },
          "LocalConstant": {
            "doc": ""
          },
          "ImportScope": {
            "doc": ""
          },
          "CustomDebugInformation": {
            "doc": ""
          },
          "UserString": {
            "doc": ""
          },
          "Blob": {
            "doc": ""
          },
          "Guid": {
            "doc": ""
          },
          "String": {
            "doc": ""
          },
          "NamespaceDefinition": {
            "doc": ""
          }
        },
        "HandleKindExtensions": {
          "doc": "",
          "doc_formatted": {}
        },
        "MetadataKind": {
          "doc": "",
          "doc_formatted": {},
          "Ecma335": {
            "doc": ""
          },
          "WindowsMetadata": {
            "doc": ""
          },
          "ManagedWindowsMetadata": {
            "doc": ""
          }
        },
        "MetadataReader": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Byte, System:Int32, System.Reflection.Metadata:MetadataReaderOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "metadata": "",
              "length": "",
              "options": ""
            }
          },
          "DebugMetadataHeader": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MetadataVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Options": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetDocument(System.Reflection.Metadata:DocumentHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "GetMethodDebugInformation(System.Reflection.Metadata:MethodDebugInformationHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "GetString(System.Reflection.Metadata:DocumentNameBlobHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          }
        },
        "MetadataReaderOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "Default": {
            "doc": ""
          },
          "ApplyWindowsRuntimeProjections": {
            "doc": ""
          }
        },
        "MetadataReaderProvider": {
          "doc": "",
          "doc_formatted": {},
          "FromMetadataImage(System.Collections.Immutable:ImmutableArray[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "image": ""
            },
            "return": ""
          },
          "FromMetadataImage(System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "start": "",
              "size": ""
            },
            "return": ""
          },
          "FromMetadataStream(System.IO:Stream, System.Reflection.Metadata:MetadataStreamOptions, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "stream": "",
              "options": "",
              "size": ""
            },
            "return": ""
          },
          "FromPortablePdbImage(System.Collections.Immutable:ImmutableArray[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "image": ""
            },
            "return": ""
          },
          "FromPortablePdbImage(System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "start": "",
              "size": ""
            },
            "return": ""
          },
          "FromPortablePdbStream(System.IO:Stream, System.Reflection.Metadata:MetadataStreamOptions, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "stream": "",
              "options": "",
              "size": ""
            },
            "return": ""
          },
          "GetMetadataReader(System.Reflection.Metadata:MetadataReaderOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "options": ""
            },
            "return": ""
          }
        },
        "MetadataStreamOptions": {
          "doc": "",
          "doc_formatted": {},
          "Default": {
            "doc": ""
          },
          "LeaveOpen": {
            "doc": ""
          },
          "PrefetchMetadata": {
            "doc": ""
          }
        },
        "MetadataStreamOptionsExtensions": {
          "doc": "",
          "doc_formatted": {},
          "IsValid(System.Reflection.Metadata:MetadataStreamOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "options": ""
            },
            "return": ""
          }
        },
        "MethodDebugInformation": {
          "doc": "",
          "doc_formatted": {},
          "Document": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SequencePointsBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetSequencePoints()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "MethodDebugInformationHandle": {
          "doc": "",
          "doc_formatted": {},
          "IsNil": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Reflection.Metadata:MethodDebugInformationHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Reflection.Metadata:MethodDebugInformationHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Reflection.Metadata:MethodDebugInformationHandle, System.Reflection.Metadata:MethodDebugInformationHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Explicit(System.Reflection.Metadata:Handle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "op_Implicit(System.Reflection.Metadata:MethodDebugInformationHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "op_Inequality(System.Reflection.Metadata:MethodDebugInformationHandle, System.Reflection.Metadata:MethodDebugInformationHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "MethodDefinitionHandle": {
          "doc": "",
          "doc_formatted": {},
          "IsNil": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ToDebugInformationHandle()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "__eq__(System.Reflection.Metadata:MethodDefinitionHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Reflection.Metadata:MethodDefinitionHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Reflection.Metadata:MethodDefinitionHandle, System.Reflection.Metadata:MethodDefinitionHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Explicit(System.Reflection.Metadata:Handle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "op_Implicit(System.Reflection.Metadata:MethodDefinitionHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": ""
            },
            "return": ""
          },
          "op_Inequality(System.Reflection.Metadata:MethodDefinitionHandle, System.Reflection.Metadata:MethodDefinitionHandle)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "PathUtilities": {
          "doc": "",
          "doc_formatted": {}
        },
        "PortablePdbVersions": {
          "doc": "",
          "doc_formatted": {}
        },
        "SequencePoint": {
          "doc": "",
          "doc_formatted": {},
          "HiddenLine": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Document": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EndColumn": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EndLine": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsHidden": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Offset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StartColumn": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StartLine": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "SequencePointCollection": {
          "doc": "",
          "doc_formatted": {}
        },
        "Ecma335": {
          "doc": "",
          "BlobHeap": {
            "doc": "",
            "doc_formatted": {},
            "GetDocumentName(System.Reflection.Metadata:DocumentNameBlobHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": ""
              },
              "return": ""
            }
          },
          "COR20Constants": {
            "doc": "",
            "doc_formatted": {}
          },
          "DocumentTableReader": {
            "doc": "",
            "doc_formatted": {}
          },
          "HandleType": {
            "doc": "",
            "doc_formatted": {}
          },
          "HeapHandleType": {
            "doc": "",
            "doc_formatted": {}
          },
          "HeapSizeFlag": {
            "doc": "",
            "doc_formatted": {},
            "StringHeapLarge": {
              "doc": ""
            },
            "GuidHeapLarge": {
              "doc": ""
            },
            "BlobHeapLarge": {
              "doc": ""
            },
            "EncDeltas": {
              "doc": ""
            },
            "DeletedMarks": {
              "doc": ""
            }
          },
          "HeapSizes": {
            "doc": "",
            "doc_formatted": {},
            "StringHeapLarge": {
              "doc": ""
            },
            "GuidHeapLarge": {
              "doc": ""
            },
            "BlobHeapLarge": {
              "doc": ""
            },
            "ExtraData": {
              "doc": ""
            }
          },
          "MetadataStreamConstants": {
            "doc": "",
            "doc_formatted": {}
          },
          "MetadataStreamKind": {
            "doc": "",
            "doc_formatted": {},
            "Illegal": {
              "doc": ""
            },
            "Compressed": {
              "doc": ""
            },
            "Uncompressed": {
              "doc": ""
            }
          },
          "MetadataTokens": {
            "doc": "",
            "doc_formatted": {},
            "TableCount": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "GetHeapOffset(System.Reflection.Metadata:Handle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": ""
              },
              "return": ""
            },
            "GetToken(System.Reflection.Metadata:Handle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": ""
              },
              "return": ""
            },
            "Handle(System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "token": ""
              },
              "return": ""
            },
            "MethodDebugInformationHandle(System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "rowNumber": ""
              },
              "return": ""
            },
            "MethodDefinitionHandle(System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "rowNumber": ""
              },
              "return": ""
            },
            "TryGetTableIndex(System.Reflection.Metadata:HandleKind, System.Reflection.Metadata.Ecma335:*TableIndex)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "type": "",
                "index": ""
              },
              "return": ""
            }
          },
          "MethodDebugInformationTableReader": {
            "doc": "",
            "doc_formatted": {}
          },
          "StreamHeader": {
            "doc": "",
            "doc_formatted": {}
          },
          "StringHandleType": {
            "doc": "",
            "doc_formatted": {}
          },
          "StringKind": {
            "doc": "",
            "doc_formatted": {},
            "Plain": {
              "doc": ""
            },
            "DotTerminated": {
              "doc": ""
            },
            "Virtual": {
              "doc": ""
            },
            "WinRTPrefixed": {
              "doc": ""
            }
          },
          "TableIndex": {
            "doc": "",
            "doc_formatted": {},
            "Module": {
              "doc": ""
            },
            "TypeRef": {
              "doc": ""
            },
            "TypeDef": {
              "doc": ""
            },
            "FieldPtr": {
              "doc": ""
            },
            "Field": {
              "doc": ""
            },
            "MethodPtr": {
              "doc": ""
            },
            "MethodDef": {
              "doc": ""
            },
            "ParamPtr": {
              "doc": ""
            },
            "Param": {
              "doc": ""
            },
            "InterfaceImpl": {
              "doc": ""
            },
            "MemberRef": {
              "doc": ""
            },
            "Constant": {
              "doc": ""
            },
            "CustomAttribute": {
              "doc": ""
            },
            "FieldMarshal": {
              "doc": ""
            },
            "DeclSecurity": {
              "doc": ""
            },
            "ClassLayout": {
              "doc": ""
            },
            "FieldLayout": {
              "doc": ""
            },
            "StandAloneSig": {
              "doc": ""
            },
            "EventMap": {
              "doc": ""
            },
            "EventPtr": {
              "doc": ""
            },
            "Event": {
              "doc": ""
            },
            "PropertyMap": {
              "doc": ""
            },
            "PropertyPtr": {
              "doc": ""
            },
            "Property": {
              "doc": ""
            },
            "MethodSemantics": {
              "doc": ""
            },
            "MethodImpl": {
              "doc": ""
            },
            "ModuleRef": {
              "doc": ""
            },
            "TypeSpec": {
              "doc": ""
            },
            "ImplMap": {
              "doc": ""
            },
            "FieldRva": {
              "doc": ""
            },
            "EncLog": {
              "doc": ""
            },
            "EncMap": {
              "doc": ""
            },
            "Assembly": {
              "doc": ""
            },
            "AssemblyProcessor": {
              "doc": ""
            },
            "AssemblyOS": {
              "doc": ""
            },
            "AssemblyRef": {
              "doc": ""
            },
            "AssemblyRefProcessor": {
              "doc": ""
            },
            "AssemblyRefOS": {
              "doc": ""
            },
            "File": {
              "doc": ""
            },
            "ExportedType": {
              "doc": ""
            },
            "ManifestResource": {
              "doc": ""
            },
            "NestedClass": {
              "doc": ""
            },
            "GenericParam": {
              "doc": ""
            },
            "MethodSpec": {
              "doc": ""
            },
            "GenericParamConstraint": {
              "doc": ""
            },
            "Document": {
              "doc": ""
            },
            "MethodDebugInformation": {
              "doc": ""
            },
            "LocalScope": {
              "doc": ""
            },
            "LocalVariable": {
              "doc": ""
            },
            "LocalConstant": {
              "doc": ""
            },
            "ImportScope": {
              "doc": ""
            },
            "StateMachineMethod": {
              "doc": ""
            },
            "CustomDebugInformation": {
              "doc": ""
            }
          },
          "TableMask": {
            "doc": "",
            "doc_formatted": {},
            "Module": {
              "doc": ""
            },
            "TypeRef": {
              "doc": ""
            },
            "TypeDef": {
              "doc": ""
            },
            "FieldPtr": {
              "doc": ""
            },
            "Field": {
              "doc": ""
            },
            "MethodPtr": {
              "doc": ""
            },
            "MethodDef": {
              "doc": ""
            },
            "ParamPtr": {
              "doc": ""
            },
            "Param": {
              "doc": ""
            },
            "InterfaceImpl": {
              "doc": ""
            },
            "MemberRef": {
              "doc": ""
            },
            "Constant": {
              "doc": ""
            },
            "CustomAttribute": {
              "doc": ""
            },
            "FieldMarshal": {
              "doc": ""
            },
            "DeclSecurity": {
              "doc": ""
            },
            "ClassLayout": {
              "doc": ""
            },
            "FieldLayout": {
              "doc": ""
            },
            "StandAloneSig": {
              "doc": ""
            },
            "EventMap": {
              "doc": ""
            },
            "EventPtr": {
              "doc": ""
            },
            "Event": {
              "doc": ""
            },
            "PropertyMap": {
              "doc": ""
            },
            "PropertyPtr": {
              "doc": ""
            },
            "PtrTables": {
              "doc": ""
            },
            "Property": {
              "doc": ""
            },
            "MethodSemantics": {
              "doc": ""
            },
            "MethodImpl": {
              "doc": ""
            },
            "ModuleRef": {
              "doc": ""
            },
            "TypeSpec": {
              "doc": ""
            },
            "ImplMap": {
              "doc": ""
            },
            "FieldRva": {
              "doc": ""
            },
            "EnCLog": {
              "doc": ""
            },
            "EnCMap": {
              "doc": ""
            },
            "EncTables": {
              "doc": ""
            },
            "Assembly": {
              "doc": ""
            },
            "AssemblyRef": {
              "doc": ""
            },
            "File": {
              "doc": ""
            },
            "ExportedType": {
              "doc": ""
            },
            "ManifestResource": {
              "doc": ""
            },
            "NestedClass": {
              "doc": ""
            },
            "GenericParam": {
              "doc": ""
            },
            "MethodSpec": {
              "doc": ""
            },
            "GenericParamConstraint": {
              "doc": ""
            },
            "ValidPortablePdbExternalTables": {
              "doc": ""
            },
            "TypeSystemTables": {
              "doc": ""
            },
            "Document": {
              "doc": ""
            },
            "MethodDebugInformation": {
              "doc": ""
            },
            "LocalScope": {
              "doc": ""
            },
            "LocalVariable": {
              "doc": ""
            },
            "LocalConstant": {
              "doc": ""
            },
            "ImportScope": {
              "doc": ""
            },
            "StateMachineMethod": {
              "doc": ""
            },
            "CustomDebugInformation": {
              "doc": ""
            },
            "DebugTables": {
              "doc": ""
            },
            "AllTables": {
              "doc": ""
            }
          },
          "TokenTypeIds": {
            "doc": "",
            "doc_formatted": {}
          }
        }
      },
      "Internal": {
        "doc": "",
        "AbstractMemoryBlock": {
          "doc": "",
          "doc_formatted": {},
          "Pointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Size": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetReader()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "ByteArrayMemoryBlock": {
          "doc": "",
          "doc_formatted": {}
        },
        "ByteArrayMemoryProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Collections.Immutable:ImmutableArray[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "array": ""
            }
          },
          "Array": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "CriticalDisposableObject": {
          "doc": "",
          "doc_formatted": {}
        },
        "ExternalMemoryBlock": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Object, System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "memoryOwner": "",
              "buffer": "",
              "size": ""
            }
          }
        },
        "ExternalMemoryBlockProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "memory": "",
              "size": ""
            }
          },
          "Pointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "Hash": {
          "doc": "",
          "doc_formatted": {}
        },
        "ImmutableMemoryStream": {
          "doc": "",
          "doc_formatted": {},
          "GetBuffer()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "LightUpHelper": {
          "doc": "",
          "doc_formatted": {}
        },
        "MemoryBlock": {
          "doc": "",
          "doc_formatted": {}
        },
        "MemoryBlockProvider": {
          "doc": "",
          "doc_formatted": {},
          "Size": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetMemoryBlock()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "GetMemoryBlock(System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "start": "",
              "size": ""
            },
            "return": ""
          },
          "GetStream(System.Reflection.Internal:*StreamConstraints)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "constraints": ""
            },
            "return": ""
          }
        },
        "MemoryMapLightUp": {
          "doc": "",
          "doc_formatted": {}
        },
        "MemoryMappedFileBlock": {
          "doc": "",
          "doc_formatted": {}
        },
        "NativeHeapMemoryBlock": {
          "doc": "",
          "doc_formatted": {}
        },
        "ObjectPool[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PinnedObject": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Object)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "obj": ""
            }
          },
          "Pointer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PooledStringBuilder": {
          "doc": "",
          "doc_formatted": {},
          "Builder": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Length": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CreatePool()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Free()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "GetInstance()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ToStringAndFree()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "ReadOnlyUnmanagedMemoryStream": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Byte, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "data": "",
              "length": ""
            }
          }
        },
        "StreamConstraints": {
          "doc": "",
          "doc_formatted": {},
          "GuardOpt": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ImageSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ImageStart": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__init__(System:Object, System:Int64, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "guardOpt": "",
              "startPosition": "",
              "imageSize": ""
            }
          }
        },
        "StreamExtensions": {
          "doc": "",
          "doc_formatted": {}
        },
        "StreamMemoryBlockProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.IO:Stream, System:Int64, System:Int32, System:Boolean, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "stream": "",
              "imageStart": "",
              "imageSize": "",
              "isFileStream": "",
              "leaveOpen": ""
            }
          }
        }
      }
    },
    "Threading": {
      "doc": "",
      "LockRecursionPolicy": {
        "doc": "",
        "doc_formatted": {},
        "NoRecursion": {
          "doc": ""
        },
        "SupportsRecursion": {
          "doc": ""
        }
      },
      "ReaderWriterCount": {
        "doc": "",
        "doc_formatted": {},
        "lockID": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "next": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "readercount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "upgradecount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "writercount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        }
      },
      "ReaderWriterLockSlim": {
        "doc": "",
        "doc_formatted": {},
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        },
        "__init__(System.Threading:LockRecursionPolicy)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "recursionPolicy": ""
          }
        },
        "CurrentReadCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "IsReadLockHeld": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "IsUpgradeableReadLockHeld": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "IsWriteLockHeld": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "RecursionPolicy": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "RecursiveReadCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "RecursiveUpgradeCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "RecursiveWriteCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "WaitingReadCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "WaitingUpgradeCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "WaitingWriteCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "EnterReadLock()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "EnterUpgradeableReadLock()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "EnterWriteLock()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "ExitReadLock()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "ExitUpgradeableReadLock()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "ExitWriteLock()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {}
        },
        "TryEnterReadLock(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "millisecondsTimeout": ""
          },
          "return": ""
        },
        "TryEnterReadLock(System:TimeSpan)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "timeout": ""
          },
          "return": ""
        },
        "TryEnterUpgradeableReadLock(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "millisecondsTimeout": ""
          },
          "return": ""
        },
        "TryEnterUpgradeableReadLock(System:TimeSpan)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "timeout": ""
          },
          "return": ""
        },
        "TryEnterWriteLock(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "millisecondsTimeout": ""
          },
          "return": ""
        },
        "TryEnterWriteLock(System:TimeSpan)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "timeout": ""
          },
          "return": ""
        }
      },
      "Tasks": {
        "doc": "",
        "TaskExtensions": {
          "doc": "",
          "doc_formatted": {},
          "Unwrap(System.Threading.Tasks:Task[System.Threading.Tasks:Task[$TResult]])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "task": ""
            },
            "return": ""
          },
          "Unwrap(System.Threading.Tasks:Task[System.Threading.Tasks:Task])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "task": ""
            },
            "return": ""
          }
        }
      }
    },
    "Collections": {
      "doc": "",
      "Immutable": {
        "doc": "",
        "ImmutableArray": {
          "doc": "",
          "doc_formatted": {},
          "CreateBuilder(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "capacity": ""
            },
            "return": ""
          }
        },
        "ImmutableArray[$T]": {
          "doc": "",
          "doc_formatted": {},
          "Empty": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__init__(System:Array[System.Collections.Immutable:T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "array": ""
            }
          },
          "IsDefault": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Item": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Length": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "UnderlyingArray": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CopyTo(System:Int32, System:Array[System.Collections.Immutable:T], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "sourceIndex": "",
              "destination": "",
              "destinationIndex": "",
              "length": ""
            }
          },
          "FirstOrDefault(System:Func[$T, System:Boolean])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "predicate": ""
            },
            "return": ""
          },
          "__getitem__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": ""
            },
            "return": ""
          },
          "Builder[$T]": {
            "doc": "",
            "doc_formatted": {}
          }
        }
      },
      "Generic": {
        "doc": "",
        "ArrayBuilder[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "capacity": ""
            }
          },
          "Capacity": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Count": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Item": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Add($T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "item": ""
            }
          },
          "First()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Last()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ToArray()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "UncheckedAdd($T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "item": ""
            }
          },
          "__getitem__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": ""
            },
            "return": ""
          },
          "__setitem__(System:Int32, $T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": "",
              "value": ""
            }
          }
        },
        "BitHelper": {
          "doc": "",
          "doc_formatted": {}
        },
        "CopyPosition": {
          "doc": "",
          "doc_formatted": {},
          "Start": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "EnumerableHelpers": {
          "doc": "",
          "doc_formatted": {}
        },
        "HashSet[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Collections.Generic:IEnumerable[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "collection": ""
            }
          },
          "__init__(System.Collections.Generic:IEqualityComparer[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "comparer": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "capacity": ""
            }
          },
          "__init__(System.Collections.Generic:IEnumerable[$T], System.Collections.Generic:IEqualityComparer[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "collection": "",
              "comparer": ""
            }
          },
          "__init__(System:Int32, System.Collections.Generic:IEqualityComparer[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "capacity": "",
              "comparer": ""
            }
          },
          "Comparer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CopyTo(System:Array[System.Collections.Generic:T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": ""
            }
          },
          "CopyTo(System:Array[System.Collections.Generic:T], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "arrayIndex": "",
              "count": ""
            }
          },
          "CreateSetComparer()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "RemoveWhere(System:Predicate[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "match": ""
            },
            "return": ""
          },
          "TrimExcess()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "TryGetValue($T, System.Collections.Generic:*T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "equalValue": "",
              "actualValue": ""
            },
            "return": ""
          },
          "Enumerator[$T]": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "HashSetDebugView[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Collections.Generic:HashSet[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "set": ""
            }
          },
          "Items": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "HashSetEqualityComparer[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Collections.Generic:IEqualityComparer[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "comparer": ""
            }
          }
        },
        "LargeArrayBuilder[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "initialize": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "maxCapacity": ""
            }
          },
          "Count": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Add($T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "item": ""
            }
          },
          "AddRange(System.Collections.Generic:IEnumerable[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "items": ""
            }
          },
          "CopyTo(System:Array[System.Collections.Generic:T], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "arrayIndex": "",
              "count": ""
            }
          },
          "CopyTo(System.Collections.Generic:CopyPosition, System:Array[System.Collections.Generic:T], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "position": "",
              "array": "",
              "arrayIndex": "",
              "count": ""
            },
            "return": ""
          },
          "GetBuffer(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": ""
            },
            "return": ""
          },
          "SlowAdd($T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "item": ""
            }
          },
          "ToArray()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "TryMove(System.Collections.Generic:*T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": ""
            },
            "return": ""
          }
        },
        "Marker": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "count": "",
              "index": ""
            }
          },
          "Count": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Index": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "SparseArrayBuilder[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "initialize": ""
            }
          },
          "Count": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Markers": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Add($T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "item": ""
            }
          },
          "AddRange(System.Collections.Generic:IEnumerable[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "items": ""
            }
          },
          "CopyTo(System:Array[System.Collections.Generic:T], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "arrayIndex": "",
              "count": ""
            }
          },
          "Reserve(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "count": ""
            }
          },
          "ReserveOrAdd(System.Collections.Generic:IEnumerable[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "items": ""
            },
            "return": ""
          },
          "ToArray()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        }
      }
    },
    "IO": {
      "doc": "",
      "BufferedStream2": {
        "doc": "",
        "doc_formatted": {}
      },
      "HandleInheritability": {
        "doc": "",
        "doc_formatted": {},
        "None": {
          "doc": ""
        },
        "Inheritable": {
          "doc": ""
        }
      },
      "LogRetentionOption": {
        "doc": "",
        "doc_formatted": {},
        "UnlimitedSequentialFiles": {
          "doc": ""
        },
        "LimitedCircularFiles": {
          "doc": ""
        },
        "SingleFileUnboundedSize": {
          "doc": ""
        },
        "LimitedSequentialFiles": {
          "doc": ""
        },
        "SingleFileBoundedSize": {
          "doc": ""
        }
      },
      "LogStream": {
        "doc": "",
        "doc_formatted": {}
      },
      "__Error": {
        "doc": "",
        "doc_formatted": {}
      },
      "MemoryMappedFiles": {
        "doc": "",
        "MemoryMappedFile": {
          "doc": "",
          "doc_formatted": {},
          "SafeMemoryMappedFileHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CreateFromFile(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "path": ""
            },
            "return": ""
          },
          "CreateFromFile(System:String, System.IO:FileMode)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "path": "",
              "mode": ""
            },
            "return": ""
          },
          "CreateFromFile(System:String, System.IO:FileMode, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "path": "",
              "mode": "",
              "mapName": ""
            },
            "return": ""
          },
          "CreateFromFile(System:String, System.IO:FileMode, System:String, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "path": "",
              "mode": "",
              "mapName": "",
              "capacity": ""
            },
            "return": ""
          },
          "CreateFromFile(System:String, System.IO:FileMode, System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "path": "",
              "mode": "",
              "mapName": "",
              "capacity": "",
              "access": ""
            },
            "return": ""
          },
          "CreateFromFile(System.IO:FileStream, System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess, System.IO:HandleInheritability, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "fileStream": "",
              "mapName": "",
              "capacity": "",
              "access": "",
              "inheritability": "",
              "leaveOpen": ""
            },
            "return": ""
          },
          "CreateFromFile(System.IO:FileStream, System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess, System.IO.MemoryMappedFiles:MemoryMappedFileSecurity, System.IO:HandleInheritability, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "fileStream": "",
              "mapName": "",
              "capacity": "",
              "access": "",
              "memoryMappedFileSecurity": "",
              "inheritability": "",
              "leaveOpen": ""
            },
            "return": ""
          },
          "CreateNew(System:String, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": ""
            },
            "return": ""
          },
          "CreateNew(System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": "",
              "access": ""
            },
            "return": ""
          },
          "CreateNew(System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess, System.IO.MemoryMappedFiles:MemoryMappedFileOptions, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": "",
              "access": "",
              "options": "",
              "inheritability": ""
            },
            "return": ""
          },
          "CreateNew(System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess, System.IO.MemoryMappedFiles:MemoryMappedFileOptions, System.IO.MemoryMappedFiles:MemoryMappedFileSecurity, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": "",
              "access": "",
              "options": "",
              "memoryMappedFileSecurity": "",
              "inheritability": ""
            },
            "return": ""
          },
          "CreateOrOpen(System:String, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": ""
            },
            "return": ""
          },
          "CreateOrOpen(System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": "",
              "access": ""
            },
            "return": ""
          },
          "CreateOrOpen(System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess, System.IO.MemoryMappedFiles:MemoryMappedFileOptions, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": "",
              "access": "",
              "options": "",
              "inheritability": ""
            },
            "return": ""
          },
          "CreateOrOpen(System:String, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess, System.IO.MemoryMappedFiles:MemoryMappedFileOptions, System.IO.MemoryMappedFiles:MemoryMappedFileSecurity, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "capacity": "",
              "access": "",
              "options": "",
              "memoryMappedFileSecurity": "",
              "inheritability": ""
            },
            "return": ""
          },
          "CreateViewAccessor()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "CreateViewAccessor(System:Int64, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "offset": "",
              "size": ""
            },
            "return": ""
          },
          "CreateViewAccessor(System:Int64, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "offset": "",
              "size": "",
              "access": ""
            },
            "return": ""
          },
          "CreateViewStream()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "CreateViewStream(System:Int64, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "offset": "",
              "size": ""
            },
            "return": ""
          },
          "CreateViewStream(System:Int64, System:Int64, System.IO.MemoryMappedFiles:MemoryMappedFileAccess)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "offset": "",
              "size": "",
              "access": ""
            },
            "return": ""
          },
          "GetAccessControl()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "OpenExisting(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": ""
            },
            "return": ""
          },
          "OpenExisting(System:String, System.IO.MemoryMappedFiles:MemoryMappedFileRights)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "desiredAccessRights": ""
            },
            "return": ""
          },
          "OpenExisting(System:String, System.IO.MemoryMappedFiles:MemoryMappedFileRights, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mapName": "",
              "desiredAccessRights": "",
              "inheritability": ""
            },
            "return": ""
          },
          "SetAccessControl(System.IO.MemoryMappedFiles:MemoryMappedFileSecurity)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "memoryMappedFileSecurity": ""
            }
          }
        },
        "MemoryMappedFileAccess": {
          "doc": "",
          "doc_formatted": {},
          "ReadWrite": {
            "doc": ""
          },
          "Read": {
            "doc": ""
          },
          "Write": {
            "doc": ""
          },
          "CopyOnWrite": {
            "doc": ""
          },
          "ReadExecute": {
            "doc": ""
          },
          "ReadWriteExecute": {
            "doc": ""
          }
        },
        "MemoryMappedFileOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "DelayAllocatePages": {
            "doc": ""
          }
        },
        "MemoryMappedFileRights": {
          "doc": "",
          "doc_formatted": {},
          "CopyOnWrite": {
            "doc": ""
          },
          "Write": {
            "doc": ""
          },
          "Read": {
            "doc": ""
          },
          "ReadWrite": {
            "doc": ""
          },
          "Execute": {
            "doc": ""
          },
          "ReadExecute": {
            "doc": ""
          },
          "ReadWriteExecute": {
            "doc": ""
          },
          "Delete": {
            "doc": ""
          },
          "ReadPermissions": {
            "doc": ""
          },
          "ChangePermissions": {
            "doc": ""
          },
          "TakeOwnership": {
            "doc": ""
          },
          "FullControl": {
            "doc": ""
          },
          "AccessSystemSecurity": {
            "doc": ""
          }
        },
        "MemoryMappedFileSecurity": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "MemoryMappedView": {
          "doc": "",
          "doc_formatted": {},
          "Flush(System:IntPtr)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "capacity": ""
            }
          }
        },
        "MemoryMappedViewAccessor": {
          "doc": "",
          "doc_formatted": {},
          "PointerOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SafeMemoryMappedViewHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Flush()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "MemoryMappedViewStream": {
          "doc": "",
          "doc_formatted": {},
          "PointerOffset": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SafeMemoryMappedViewHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        }
      },
      "Pipes": {
        "doc": "",
        "AnonymousPipeClientStream": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeHandleAsString": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, Microsoft.Win32.SafeHandles:SafePipeHandle)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "safePipeHandle": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "pipeHandleAsString": ""
            }
          }
        },
        "AnonymousPipeServerStream": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.IO.Pipes:PipeDirection)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "inheritability": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, Microsoft.Win32.SafeHandles:SafePipeHandle, Microsoft.Win32.SafeHandles:SafePipeHandle)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "serverSafePipeHandle": "",
              "clientSafePipeHandle": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, System.IO:HandleInheritability, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "inheritability": "",
              "bufferSize": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, System.IO:HandleInheritability, System:Int32, System.IO.Pipes:PipeSecurity)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "inheritability": "",
              "bufferSize": "",
              "pipeSecurity": ""
            }
          },
          "ClientSafePipeHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DisposeLocalCopyOfClientHandle()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "GetClientHandleAsString()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "IOCancellationHelper": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Threading:CancellationToken)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "cancellationToken": ""
            }
          },
          "AllowCancellation(System.Runtime.InteropServices:SafeHandle, System.Threading:NativeOverlapped)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "handle": "",
              "overlapped": ""
            }
          },
          "SetOperationCompleted()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "ThrowIOOperationAborted()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "NamedPipeClientStream": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": ""
            }
          },
          "__init__(System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "serverName": "",
              "pipeName": ""
            }
          },
          "__init__(System:String, System:String, System.IO.Pipes:PipeDirection)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "serverName": "",
              "pipeName": "",
              "direction": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, System:Boolean, System:Boolean, Microsoft.Win32.SafeHandles:SafePipeHandle)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "isAsync": "",
              "isConnected": "",
              "safePipeHandle": ""
            }
          },
          "__init__(System:String, System:String, System.IO.Pipes:PipeDirection, System.IO.Pipes:PipeOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "serverName": "",
              "pipeName": "",
              "direction": "",
              "options": ""
            }
          },
          "__init__(System:String, System:String, System.IO.Pipes:PipeDirection, System.IO.Pipes:PipeOptions, System.Security.Principal:TokenImpersonationLevel)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "serverName": "",
              "pipeName": "",
              "direction": "",
              "options": "",
              "impersonationLevel": ""
            }
          },
          "__init__(System:String, System:String, System.IO.Pipes:PipeAccessRights, System.IO.Pipes:PipeOptions, System.Security.Principal:TokenImpersonationLevel, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "serverName": "",
              "pipeName": "",
              "desiredAccessRights": "",
              "options": "",
              "impersonationLevel": "",
              "inheritability": ""
            }
          },
          "__init__(System:String, System:String, System.IO.Pipes:PipeDirection, System.IO.Pipes:PipeOptions, System.Security.Principal:TokenImpersonationLevel, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "serverName": "",
              "pipeName": "",
              "direction": "",
              "options": "",
              "impersonationLevel": "",
              "inheritability": ""
            }
          },
          "NumberOfServerInstances": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Connect()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "Connect(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "timeout": ""
            }
          },
          "ConnectAsync()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ConnectAsync(System.Threading:CancellationToken)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "cancellationToken": ""
            },
            "return": ""
          },
          "ConnectAsync(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "timeout": ""
            },
            "return": ""
          },
          "ConnectAsync(System:Int32, System.Threading:CancellationToken)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "timeout": "",
              "cancellationToken": ""
            },
            "return": ""
          }
        },
        "NamedPipeServerStream": {
          "doc": "",
          "doc_formatted": {},
          "MaxAllowedServerInstances": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": ""
            }
          },
          "__init__(System.IO.Pipes:PipeDirection, System:Boolean, System:Boolean, Microsoft.Win32.SafeHandles:SafePipeHandle)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "direction": "",
              "isAsync": "",
              "isConnected": "",
              "safePipeHandle": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32, System.IO.Pipes:PipeTransmissionMode)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": "",
              "transmissionMode": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32, System.IO.Pipes:PipeTransmissionMode, System.IO.Pipes:PipeOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": "",
              "transmissionMode": "",
              "options": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32, System.IO.Pipes:PipeTransmissionMode, System.IO.Pipes:PipeOptions, System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": "",
              "transmissionMode": "",
              "options": "",
              "inBufferSize": "",
              "outBufferSize": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32, System.IO.Pipes:PipeTransmissionMode, System.IO.Pipes:PipeOptions, System:Int32, System:Int32, System.IO.Pipes:PipeSecurity)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": "",
              "transmissionMode": "",
              "options": "",
              "inBufferSize": "",
              "outBufferSize": "",
              "pipeSecurity": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32, System.IO.Pipes:PipeTransmissionMode, System.IO.Pipes:PipeOptions, System:Int32, System:Int32, System.IO.Pipes:PipeSecurity, System.IO:HandleInheritability)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": "",
              "transmissionMode": "",
              "options": "",
              "inBufferSize": "",
              "outBufferSize": "",
              "pipeSecurity": "",
              "inheritability": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeDirection, System:Int32, System.IO.Pipes:PipeTransmissionMode, System.IO.Pipes:PipeOptions, System:Int32, System:Int32, System.IO.Pipes:PipeSecurity, System.IO:HandleInheritability, System.IO.Pipes:PipeAccessRights)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "pipeName": "",
              "direction": "",
              "maxNumberOfServerInstances": "",
              "transmissionMode": "",
              "options": "",
              "inBufferSize": "",
              "outBufferSize": "",
              "pipeSecurity": "",
              "inheritability": "",
              "additionalAccessRights": ""
            }
          },
          "BeginWaitForConnection(System:AsyncCallback, System:Object)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "callback": "",
              "state": ""
            },
            "return": ""
          },
          "Disconnect()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "EndWaitForConnection(System:IAsyncResult)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "asyncResult": ""
            }
          },
          "GetImpersonationUserName()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "RunAsClient(System.IO.Pipes:PipeStreamImpersonationWorker)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "impersonationWorker": ""
            }
          },
          "WaitForConnection()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "WaitForConnectionAsync()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "WaitForConnectionAsync(System.Threading:CancellationToken)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "cancellationToken": ""
            },
            "return": ""
          }
        },
        "PipeAccessRights": {
          "doc": "",
          "doc_formatted": {},
          "ReadData": {
            "doc": ""
          },
          "WriteData": {
            "doc": ""
          },
          "CreateNewInstance": {
            "doc": ""
          },
          "ReadExtendedAttributes": {
            "doc": ""
          },
          "WriteExtendedAttributes": {
            "doc": ""
          },
          "ReadAttributes": {
            "doc": ""
          },
          "WriteAttributes": {
            "doc": ""
          },
          "Write": {
            "doc": ""
          },
          "Delete": {
            "doc": ""
          },
          "ReadPermissions": {
            "doc": ""
          },
          "Read": {
            "doc": ""
          },
          "ReadWrite": {
            "doc": ""
          },
          "ChangePermissions": {
            "doc": ""
          },
          "TakeOwnership": {
            "doc": ""
          },
          "Synchronize": {
            "doc": ""
          },
          "FullControl": {
            "doc": ""
          },
          "AccessSystemSecurity": {
            "doc": ""
          }
        },
        "PipeAccessRule": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Security.Principal:IdentityReference, System.IO.Pipes:PipeAccessRights, System.Security.AccessControl:AccessControlType)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "identity": "",
              "rights": "",
              "type": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeAccessRights, System.Security.AccessControl:AccessControlType)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "identity": "",
              "rights": "",
              "type": ""
            }
          },
          "PipeAccessRights": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PipeAsyncResult": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "PipeAuditRule": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Security.Principal:IdentityReference, System.IO.Pipes:PipeAccessRights, System.Security.AccessControl:AuditFlags)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "identity": "",
              "rights": "",
              "flags": ""
            }
          },
          "__init__(System:String, System.IO.Pipes:PipeAccessRights, System.Security.AccessControl:AuditFlags)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "identity": "",
              "rights": "",
              "flags": ""
            }
          },
          "PipeAccessRights": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PipeDirection": {
          "doc": "",
          "doc_formatted": {},
          "In": {
            "doc": ""
          },
          "Out": {
            "doc": ""
          },
          "InOut": {
            "doc": ""
          }
        },
        "PipeOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "Asynchronous": {
            "doc": ""
          },
          "WriteThrough": {
            "doc": ""
          }
        },
        "PipeSecurity": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "AddAccessRule(System.IO.Pipes:PipeAccessRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "AddAuditRule(System.IO.Pipes:PipeAuditRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "RemoveAccessRule(System.IO.Pipes:PipeAccessRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            },
            "return": ""
          },
          "RemoveAccessRuleSpecific(System.IO.Pipes:PipeAccessRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "RemoveAuditRule(System.IO.Pipes:PipeAuditRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            },
            "return": ""
          },
          "RemoveAuditRuleAll(System.IO.Pipes:PipeAuditRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "RemoveAuditRuleSpecific(System.IO.Pipes:PipeAuditRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "ResetAccessRule(System.IO.Pipes:PipeAccessRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "SetAccessRule(System.IO.Pipes:PipeAccessRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          },
          "SetAuditRule(System.IO.Pipes:PipeAuditRule)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "rule": ""
            }
          }
        },
        "PipeState": {
          "doc": "",
          "doc_formatted": {},
          "WaitingToConnect": {
            "doc": ""
          },
          "Connected": {
            "doc": ""
          },
          "Broken": {
            "doc": ""
          },
          "Disconnected": {
            "doc": ""
          },
          "Closed": {
            "doc": ""
          }
        },
        "PipeStream": {
          "doc": "",
          "doc_formatted": {},
          "InBufferSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsAsync": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsConnected": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsMessageComplete": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "OutBufferSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ReadMode": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SafePipeHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "TransmissionMode": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetAccessControl()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "SetAccessControl(System.IO.Pipes:PipeSecurity)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "pipeSecurity": ""
            }
          },
          "WaitForPipeDrain()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "PipeStreamAsyncResult": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "PipeStreamImpersonationWorker()": {
          "doc": "",
          "doc_formatted": {}
        },
        "PipeTransmissionMode": {
          "doc": "",
          "doc_formatted": {},
          "Byte": {
            "doc": ""
          },
          "Message": {
            "doc": ""
          }
        }
      }
    },
    "Dynamic": {
      "doc": "",
      "BinaryOperationBinder": {
        "doc": "",
        "doc_formatted": {},
        "Operation": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackBinaryOperation(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "arg": ""
          },
          "return": ""
        },
        "FallbackBinaryOperation(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "arg": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "BindingRestrictions": {
        "doc": "",
        "doc_formatted": {},
        "Empty": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Combine(System.Collections.Generic:IList[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "contributingObjects": ""
          },
          "return": ""
        },
        "GetExpressionRestriction(System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "expression": ""
          },
          "return": ""
        },
        "GetInstanceRestriction(System.Linq.Expressions:Expression, System:Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "expression": "",
            "instance": ""
          },
          "return": ""
        },
        "GetTypeRestriction(System.Linq.Expressions:Expression, System:Type)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "expression": "",
            "type": ""
          },
          "return": ""
        },
        "Merge(System.Dynamic:BindingRestrictions)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "restrictions": ""
          },
          "return": ""
        },
        "ToExpression()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        }
      },
      "CallInfo": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System:Int32, System.Collections.Generic:IEnumerable[System:String])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "argCount": "",
            "argNames": ""
          }
        },
        "__init__(System:Int32, System:Array[System:String])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "argCount": "",
            "argNames": ""
          }
        },
        "ArgumentCount": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "ArgumentNames": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "ConvertBinder": {
        "doc": "",
        "doc_formatted": {},
        "Explicit": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Type": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackConvert(System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": ""
          },
          "return": ""
        },
        "FallbackConvert(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "CreateInstanceBinder": {
        "doc": "",
        "doc_formatted": {},
        "CallInfo": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackCreateInstance(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": ""
          },
          "return": ""
        },
        "FallbackCreateInstance(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "DeleteIndexBinder": {
        "doc": "",
        "doc_formatted": {},
        "CallInfo": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackDeleteIndex(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "indexes": ""
          },
          "return": ""
        },
        "FallbackDeleteIndex(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "indexes": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "DeleteMemberBinder": {
        "doc": "",
        "doc_formatted": {},
        "IgnoreCase": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Name": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackDeleteMember(System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": ""
          },
          "return": ""
        },
        "FallbackDeleteMember(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "DynamicMetaObject": {
        "doc": "",
        "doc_formatted": {},
        "EmptyMetaObjects": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "__init__(System.Linq.Expressions:Expression, System.Dynamic:BindingRestrictions)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "expression": "",
            "restrictions": ""
          }
        },
        "__init__(System.Linq.Expressions:Expression, System.Dynamic:BindingRestrictions, System:Object)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "expression": "",
            "restrictions": "",
            "value": ""
          }
        },
        "Expression": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "HasValue": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "LimitType": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Restrictions": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "RuntimeType": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Value": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "BindBinaryOperation(System.Dynamic:BinaryOperationBinder, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "arg": ""
          },
          "return": ""
        },
        "BindConvert(System.Dynamic:ConvertBinder)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": ""
          },
          "return": ""
        },
        "BindCreateInstance(System.Dynamic:CreateInstanceBinder, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "args": ""
          },
          "return": ""
        },
        "BindDeleteIndex(System.Dynamic:DeleteIndexBinder, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "indexes": ""
          },
          "return": ""
        },
        "BindDeleteMember(System.Dynamic:DeleteMemberBinder)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": ""
          },
          "return": ""
        },
        "BindGetIndex(System.Dynamic:GetIndexBinder, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "indexes": ""
          },
          "return": ""
        },
        "BindGetMember(System.Dynamic:GetMemberBinder)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": ""
          },
          "return": ""
        },
        "BindInvoke(System.Dynamic:InvokeBinder, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "args": ""
          },
          "return": ""
        },
        "BindInvokeMember(System.Dynamic:InvokeMemberBinder, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "args": ""
          },
          "return": ""
        },
        "BindSetIndex(System.Dynamic:SetIndexBinder, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "indexes": "",
            "value": ""
          },
          "return": ""
        },
        "BindSetMember(System.Dynamic:SetMemberBinder, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "value": ""
          },
          "return": ""
        },
        "BindUnaryOperation(System.Dynamic:UnaryOperationBinder)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": ""
          },
          "return": ""
        },
        "Create(System:Object, System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "value": "",
            "expression": ""
          },
          "return": ""
        },
        "GetDynamicMemberNames()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        }
      },
      "DynamicMetaObjectBinder": {
        "doc": "",
        "doc_formatted": {},
        "ReturnType": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Bind(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": ""
          },
          "return": ""
        },
        "Defer(System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "args": ""
          },
          "return": ""
        },
        "Defer(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": ""
          },
          "return": ""
        },
        "GetUpdateExpression(System:Type)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "type": ""
          },
          "return": ""
        }
      },
      "DynamicObject": {
        "doc": "",
        "doc_formatted": {},
        "GetDynamicMemberNames()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "TryBinaryOperation(System.Dynamic:BinaryOperationBinder, System:Object, System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "arg": "",
            "result": ""
          },
          "return": ""
        },
        "TryConvert(System.Dynamic:ConvertBinder, System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "result": ""
          },
          "return": ""
        },
        "TryCreateInstance(System.Dynamic:CreateInstanceBinder, System:Array[System:Object], System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "args": "",
            "result": ""
          },
          "return": ""
        },
        "TryDeleteIndex(System.Dynamic:DeleteIndexBinder, System:Array[System:Object])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "indexes": ""
          },
          "return": ""
        },
        "TryDeleteMember(System.Dynamic:DeleteMemberBinder)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": ""
          },
          "return": ""
        },
        "TryGetIndex(System.Dynamic:GetIndexBinder, System:Array[System:Object], System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "indexes": "",
            "result": ""
          },
          "return": ""
        },
        "TryGetMember(System.Dynamic:GetMemberBinder, System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "result": ""
          },
          "return": ""
        },
        "TryInvoke(System.Dynamic:InvokeBinder, System:Array[System:Object], System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "args": "",
            "result": ""
          },
          "return": ""
        },
        "TryInvokeMember(System.Dynamic:InvokeMemberBinder, System:Array[System:Object], System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "args": "",
            "result": ""
          },
          "return": ""
        },
        "TrySetIndex(System.Dynamic:SetIndexBinder, System:Array[System:Object], System:Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "indexes": "",
            "value": ""
          },
          "return": ""
        },
        "TrySetMember(System.Dynamic:SetMemberBinder, System:Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "value": ""
          },
          "return": ""
        },
        "TryUnaryOperation(System.Dynamic:UnaryOperationBinder, System:*Object)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "binder": "",
            "result": ""
          },
          "return": ""
        }
      },
      "ExpandoClass": {
        "doc": "",
        "doc_formatted": {}
      },
      "ExpandoObject": {
        "doc": "",
        "doc_formatted": {},
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        }
      },
      "GetIndexBinder": {
        "doc": "",
        "doc_formatted": {},
        "CallInfo": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackGetIndex(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "indexes": ""
          },
          "return": ""
        },
        "FallbackGetIndex(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "indexes": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "GetMemberBinder": {
        "doc": "",
        "doc_formatted": {},
        "IgnoreCase": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Name": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackGetMember(System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": ""
          },
          "return": ""
        },
        "FallbackGetMember(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "IDynamicMetaObjectProvider": {
        "doc": "",
        "doc_formatted": {},
        "GetMetaObject(System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "parameter": ""
          },
          "return": ""
        }
      },
      "IInvokeOnGetBinder": {
        "doc": "",
        "doc_formatted": {},
        "InvokeOnGet": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "InvokeBinder": {
        "doc": "",
        "doc_formatted": {},
        "CallInfo": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackInvoke(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": ""
          },
          "return": ""
        },
        "FallbackInvoke(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "InvokeMemberBinder": {
        "doc": "",
        "doc_formatted": {},
        "CallInfo": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "IgnoreCase": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Name": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackInvoke(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": "",
            "errorSuggestion": ""
          },
          "return": ""
        },
        "FallbackInvokeMember(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": ""
          },
          "return": ""
        },
        "FallbackInvokeMember(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "args": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "SetIndexBinder": {
        "doc": "",
        "doc_formatted": {},
        "CallInfo": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackSetIndex(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "indexes": "",
            "value": ""
          },
          "return": ""
        },
        "FallbackSetIndex(System.Dynamic:DynamicMetaObject, System:Array[System.Dynamic:DynamicMetaObject], System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "indexes": "",
            "value": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "SetMemberBinder": {
        "doc": "",
        "doc_formatted": {},
        "IgnoreCase": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Name": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackSetMember(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "value": ""
          },
          "return": ""
        },
        "FallbackSetMember(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "value": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "UnaryOperationBinder": {
        "doc": "",
        "doc_formatted": {},
        "Operation": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "FallbackUnaryOperation(System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": ""
          },
          "return": ""
        },
        "FallbackUnaryOperation(System.Dynamic:DynamicMetaObject, System.Dynamic:DynamicMetaObject)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "target": "",
            "errorSuggestion": ""
          },
          "return": ""
        }
      },
      "UpdateDelegates": {
        "doc": "",
        "doc_formatted": {}
      },
      "Utils": {
        "doc": "",
        "CacheDict[$TKey, $TValue]": {
          "doc": "",
          "doc_formatted": {}
        },
        "CollectionExtensions": {
          "doc": "",
          "doc_formatted": {}
        },
        "ContractUtils": {
          "doc": "",
          "doc_formatted": {}
        },
        "EmptyReadOnlyCollection[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "Helpers": {
          "doc": "",
          "doc_formatted": {}
        },
        "ReferenceEqualityComparer[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypeExtensions": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypeUtils": {
          "doc": "",
          "doc_formatted": {}
        }
      }
    },
    "Security": {
      "doc": "",
      "ManifestKinds": {
        "doc": "",
        "doc_formatted": {},
        "None": {
          "doc": ""
        },
        "Deployment": {
          "doc": ""
        },
        "Application": {
          "doc": ""
        },
        "ApplicationAndDeployment": {
          "doc": ""
        }
      },
      "Cryptography": {
        "doc": "",
        "AesCng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keyName": ""
            }
          },
          "__init__(System:String, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keyName": "",
              "provider": ""
            }
          },
          "__init__(System:String, System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngKeyOpenOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keyName": "",
              "provider": "",
              "openOptions": ""
            }
          }
        },
        "AesCryptoServiceProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "AesManaged": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "AsymmetricPaddingMode": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "Pkcs1": {
            "doc": ""
          },
          "Oaep": {
            "doc": ""
          },
          "Pss": {
            "doc": ""
          }
        },
        "BCRYPT_DSA_KEY_BLOB_V2": {
          "doc": "",
          "doc_formatted": {},
          "Count0": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Count1": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Count2": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Count3": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "cbGroupSize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "cbKey": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "cbSeedLength": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "dwMagic": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "hashAlgorithm": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "standardVersion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "BCryptAlgorithmHandleCache": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "GetCachedAlgorithmHandle(System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "algorithm": "",
              "implementation": ""
            },
            "return": ""
          }
        },
        "BCryptHashAlgorithm": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Security.Cryptography:CngAlgorithm, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "algorithm": "",
              "implementation": ""
            }
          },
          "HashCore(System:Array[System:Byte], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "ibStart": "",
              "cbSize": ""
            }
          },
          "HashFinal()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "HashStream(System.IO:Stream)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "stream": ""
            }
          },
          "Initialize()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "BCryptNative": {
          "doc": "",
          "doc_formatted": {},
          "BCryptDecrypt(Microsoft.Win32.SafeHandles:SafeBCryptKeyHandle, System:Array[System:Byte], System:Int32, System:Int32, System:Array[System:Byte], System:Array[System:Byte], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hKey": "",
              "input": "",
              "inputOffset": "",
              "inputCount": "",
              "iv": "",
              "output": "",
              "outputOffset": "",
              "outputCount": ""
            },
            "return": ""
          },
          "BCryptEncrypt(Microsoft.Win32.SafeHandles:SafeBCryptKeyHandle, System:Array[System:Byte], System:Int32, System:Int32, System:Array[System:Byte], System:Array[System:Byte], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hKey": "",
              "input": "",
              "inputOffset": "",
              "inputCount": "",
              "iv": "",
              "output": "",
              "outputOffset": "",
              "outputCount": ""
            },
            "return": ""
          },
          "SetCipherMode(Microsoft.Win32.SafeHandles:SafeBCryptAlgorithmHandle, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hAlg": "",
              "cipherMode": ""
            }
          }
        },
        "CapiHashAlgorithm": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String, System.Security.Cryptography:CapiNative.ProviderType, System.Security.Cryptography:CapiNative.AlgorithmId)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "provider": "",
              "providerType": "",
              "algorithm": ""
            }
          },
          "HashCore(System:Array[System:Byte], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "ibStart": "",
              "cbSize": ""
            }
          },
          "HashFinal()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Initialize()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "CapiNative": {
          "doc": "",
          "doc_formatted": {}
        },
        "CapiSymmetricAlgorithm": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Int32, System:Int32, Microsoft.Win32.SafeHandles:SafeCspHandle, Microsoft.Win32.SafeHandles:SafeCapiKeyHandle, System:Array[System:Byte], System.Security.Cryptography:CipherMode, System.Security.Cryptography:PaddingMode, System.Security.Cryptography:EncryptionMode)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "blockSize": "",
              "feedbackSize": "",
              "provider": "",
              "key": "",
              "iv": "",
              "cipherMode": "",
              "paddingMode": "",
              "encryptionMode": ""
            }
          }
        },
        "CngAlgorithm": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "algorithm": ""
            }
          },
          "Algorithm": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDiffieHellman": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDiffieHellmanP256": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDiffieHellmanP384": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDiffieHellmanP521": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDsa": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDsaP256": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDsaP384": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDsaP521": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MD5": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Rsa": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Sha1": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Sha256": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Sha384": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Sha512": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Security.Cryptography:CngAlgorithm)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Security.Cryptography:CngAlgorithm)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Security.Cryptography:CngAlgorithm, System.Security.Cryptography:CngAlgorithm)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Security.Cryptography:CngAlgorithm, System.Security.Cryptography:CngAlgorithm)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "CngAlgorithmGroup": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "algorithmGroup": ""
            }
          },
          "AlgorithmGroup": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DiffieHellman": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Dsa": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDiffieHellman": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ECDsa": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Rsa": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Security.Cryptography:CngAlgorithmGroup)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Security.Cryptography:CngAlgorithmGroup)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Security.Cryptography:CngAlgorithmGroup, System.Security.Cryptography:CngAlgorithmGroup)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Security.Cryptography:CngAlgorithmGroup, System.Security.Cryptography:CngAlgorithmGroup)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "CngExportPolicies": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "AllowExport": {
            "doc": ""
          },
          "AllowPlaintextExport": {
            "doc": ""
          },
          "AllowArchiving": {
            "doc": ""
          },
          "AllowPlaintextArchiving": {
            "doc": ""
          }
        },
        "CngKey": {
          "doc": "",
          "doc_formatted": {},
          "Algorithm": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "AlgorithmGroup": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ExportPolicy": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Handle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsEphemeral": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsMachineKey": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "KeyName": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "KeySize": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "KeyUsage": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ParentWindowHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Provider": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ProviderHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "UIPolicy": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "UniqueName": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Create(System.Security.Cryptography:CngAlgorithm)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "algorithm": ""
            },
            "return": ""
          },
          "Create(System.Security.Cryptography:CngAlgorithm, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "algorithm": "",
              "keyName": ""
            },
            "return": ""
          },
          "Create(System.Security.Cryptography:CngAlgorithm, System:String, System.Security.Cryptography:CngKeyCreationParameters)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "algorithm": "",
              "keyName": "",
              "creationParameters": ""
            },
            "return": ""
          },
          "Delete()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "Exists(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyName": ""
            },
            "return": ""
          },
          "Exists(System:String, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyName": "",
              "provider": ""
            },
            "return": ""
          },
          "Exists(System:String, System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngKeyOpenOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyName": "",
              "provider": "",
              "options": ""
            },
            "return": ""
          },
          "Export(System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "format": ""
            },
            "return": ""
          },
          "GetProperty(System:String, System.Security.Cryptography:CngPropertyOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": "",
              "options": ""
            },
            "return": ""
          },
          "HasProperty(System:String, System.Security.Cryptography:CngPropertyOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": "",
              "options": ""
            },
            "return": ""
          },
          "Import(System:Array[System:Byte], System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyBlob": "",
              "format": ""
            },
            "return": ""
          },
          "Import(System:Array[System:Byte], System.Security.Cryptography:CngKeyBlobFormat, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyBlob": "",
              "format": "",
              "provider": ""
            },
            "return": ""
          },
          "Open(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyName": ""
            },
            "return": ""
          },
          "Open(Microsoft.Win32.SafeHandles:SafeNCryptKeyHandle, System.Security.Cryptography:CngKeyHandleOpenOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyHandle": "",
              "keyHandleOpenOptions": ""
            },
            "return": ""
          },
          "Open(System:String, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyName": "",
              "provider": ""
            },
            "return": ""
          },
          "Open(System:String, System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngKeyOpenOptions)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "keyName": "",
              "provider": "",
              "openOptions": ""
            },
            "return": ""
          },
          "SetProperty(System.Security.Cryptography:CngProperty)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "property": ""
            }
          }
        },
        "CngKeyBlobFormat": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "format": ""
            }
          },
          "EccFullPrivateBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EccFullPublicBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EccPrivateBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EccPublicBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Format": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GenericPrivateBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GenericPublicBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "OpaqueTransportBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Pkcs8PrivateBlob": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Security.Cryptography:CngKeyBlobFormat, System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Security.Cryptography:CngKeyBlobFormat, System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "CngKeyCreationOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "MachineKey": {
            "doc": ""
          },
          "OverwriteExistingKey": {
            "doc": ""
          }
        },
        "CngKeyCreationParameters": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "ExportPolicy": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "KeyCreationOptions": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "KeyUsage": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Parameters": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ParentWindowHandle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Provider": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "UIPolicy": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "CngKeyHandleOpenOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "EphemeralKey": {
            "doc": ""
          }
        },
        "CngKeyOpenOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "UserKey": {
            "doc": ""
          },
          "MachineKey": {
            "doc": ""
          },
          "Silent": {
            "doc": ""
          }
        },
        "CngKeyTypes": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "MachineKey": {
            "doc": ""
          }
        },
        "CngKeyUsages": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "Decryption": {
            "doc": ""
          },
          "Signing": {
            "doc": ""
          },
          "KeyAgreement": {
            "doc": ""
          },
          "AllUsages": {
            "doc": ""
          }
        },
        "CngProperty": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String, System:Array[System:Byte], System.Security.Cryptography:CngPropertyOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "name": "",
              "value": "",
              "options": ""
            }
          },
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Options": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetValue()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "__eq__(System.Security.Cryptography:CngProperty)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Security.Cryptography:CngProperty)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Security.Cryptography:CngProperty, System.Security.Cryptography:CngProperty)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Security.Cryptography:CngProperty, System.Security.Cryptography:CngProperty)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "CngPropertyCollection": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "CngPropertyOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "CustomProperty": {
            "doc": ""
          },
          "Persist": {
            "doc": ""
          }
        },
        "CngProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "provider": ""
            }
          },
          "MicrosoftSmartCardKeyStorageProvider": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "MicrosoftSoftwareKeyStorageProvider": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Provider": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__eq__(System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "__ne__(System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "other": ""
            },
            "return": ""
          },
          "op_Equality(System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "op_Inequality(System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          }
        },
        "CngUIPolicy": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Security.Cryptography:CngUIProtectionLevels)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "protectionLevel": ""
            }
          },
          "__init__(System.Security.Cryptography:CngUIProtectionLevels, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "protectionLevel": "",
              "friendlyName": ""
            }
          },
          "__init__(System.Security.Cryptography:CngUIProtectionLevels, System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "protectionLevel": "",
              "friendlyName": "",
              "description": ""
            }
          },
          "__init__(System.Security.Cryptography:CngUIProtectionLevels, System:String, System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "protectionLevel": "",
              "friendlyName": "",
              "description": "",
              "useContext": ""
            }
          },
          "__init__(System.Security.Cryptography:CngUIProtectionLevels, System:String, System:String, System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "protectionLevel": "",
              "friendlyName": "",
              "description": "",
              "useContext": "",
              "creationTitle": ""
            }
          },
          "CreationTitle": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Description": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "FriendlyName": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ProtectionLevel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "UseContext": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "CngUIProtectionLevels": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "ProtectKey": {
            "doc": ""
          },
          "ForceHighProtection": {
            "doc": ""
          }
        },
        "DSACng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Security.Cryptography:CngKey)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "key": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keySize": ""
            }
          },
          "Key": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "DSAFIPSVERSION_ENUM": {
          "doc": "",
          "doc_formatted": {},
          "DSA_FIPS186_2": {
            "doc": ""
          },
          "DSA_FIPS186_3": {
            "doc": ""
          }
        },
        "ECCng": {
          "doc": "",
          "doc_formatted": {}
        },
        "ECCurve": {
          "doc": "",
          "doc_formatted": {},
          "A": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "B": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Cofactor": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CurveType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "G": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Hash": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Order": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Polynomial": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Prime": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Seed": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsCharacteristic2": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsExplicit": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsNamed": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsPrime": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Oid": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CreateFromFriendlyName(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "oidFriendlyName": ""
            },
            "return": ""
          },
          "CreateFromOid(System.Security.Cryptography:Oid)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "curveOid": ""
            },
            "return": ""
          },
          "CreateFromValue(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "oidValue": ""
            },
            "return": ""
          },
          "Validate()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "ECCurveType": {
            "doc": "",
            "doc_formatted": {},
            "Implicit": {
              "doc": ""
            },
            "PrimeShortWeierstrass": {
              "doc": ""
            },
            "PrimeTwistedEdwards": {
              "doc": ""
            },
            "PrimeMontgomery": {
              "doc": ""
            },
            "Characteristic2": {
              "doc": ""
            },
            "Named": {
              "doc": ""
            }
          },
          "NamedCurves": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "ECDiffieHellman": {
          "doc": "",
          "doc_formatted": {},
          "PublicKey": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Create()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Create(System.Security.Cryptography:ECCurve)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "curve": ""
            },
            "return": ""
          },
          "Create(System.Security.Cryptography:ECParameters)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "parameters": ""
            },
            "return": ""
          },
          "Create(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "algorithm": ""
            },
            "return": ""
          },
          "DeriveKeyFromHash(System.Security.Cryptography:ECDiffieHellmanPublicKey, System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "DeriveKeyFromHash(System.Security.Cryptography:ECDiffieHellmanPublicKey, System.Security.Cryptography:HashAlgorithmName, System:Array[System:Byte], System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": "",
              "hashAlgorithm": "",
              "secretPrepend": "",
              "secretAppend": ""
            },
            "return": ""
          },
          "DeriveKeyFromHmac(System.Security.Cryptography:ECDiffieHellmanPublicKey, System.Security.Cryptography:HashAlgorithmName, System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": "",
              "hashAlgorithm": "",
              "hmacKey": ""
            },
            "return": ""
          },
          "DeriveKeyFromHmac(System.Security.Cryptography:ECDiffieHellmanPublicKey, System.Security.Cryptography:HashAlgorithmName, System:Array[System:Byte], System:Array[System:Byte], System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": "",
              "hashAlgorithm": "",
              "hmacKey": "",
              "secretPrepend": "",
              "secretAppend": ""
            },
            "return": ""
          },
          "DeriveKeyMaterial(System.Security.Cryptography:ECDiffieHellmanPublicKey)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": ""
            },
            "return": ""
          },
          "DeriveKeyTls(System.Security.Cryptography:ECDiffieHellmanPublicKey, System:Array[System:Byte], System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": "",
              "prfLabel": "",
              "prfSeed": ""
            },
            "return": ""
          },
          "ExportExplicitParameters(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "includePrivateParameters": ""
            },
            "return": ""
          },
          "ExportParameters(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "includePrivateParameters": ""
            },
            "return": ""
          },
          "GenerateKey(System.Security.Cryptography:ECCurve)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "curve": ""
            }
          },
          "ImportParameters(System.Security.Cryptography:ECParameters)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "parameters": ""
            }
          }
        },
        "ECDiffieHellmanCng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Security.Cryptography:CngKey)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "key": ""
            }
          },
          "__init__(System.Security.Cryptography:ECCurve)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "curve": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keySize": ""
            }
          },
          "HashAlgorithm": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "HmacKey": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Key": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "KeyDerivationFunction": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Label": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SecretAppend": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SecretPrepend": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Seed": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "UseSecretAgreementAsHmacKey": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DeriveKeyMaterial(System.Security.Cryptography:CngKey)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": ""
            },
            "return": ""
          },
          "DeriveSecretAgreementHandle(System.Security.Cryptography:CngKey)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": ""
            },
            "return": ""
          },
          "DeriveSecretAgreementHandle(System.Security.Cryptography:ECDiffieHellmanPublicKey)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "otherPartyPublicKey": ""
            },
            "return": ""
          },
          "FromXmlString(System:String, System.Security.Cryptography:ECKeyXmlFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "xml": "",
              "format": ""
            }
          },
          "ToXmlString(System.Security.Cryptography:ECKeyXmlFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "format": ""
            },
            "return": ""
          }
        },
        "ECDiffieHellmanCngPublicKey": {
          "doc": "",
          "doc_formatted": {},
          "BlobFormat": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "FromByteArray(System:Array[System:Byte], System.Security.Cryptography:CngKeyBlobFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "publicKeyBlob": "",
              "format": ""
            },
            "return": ""
          },
          "FromXmlString(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "xml": ""
            },
            "return": ""
          },
          "Import()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "ECDiffieHellmanKeyDerivationFunction": {
          "doc": "",
          "doc_formatted": {},
          "Hash": {
            "doc": ""
          },
          "Hmac": {
            "doc": ""
          },
          "Tls": {
            "doc": ""
          }
        },
        "ECDiffieHellmanPublicKey": {
          "doc": "",
          "doc_formatted": {},
          "ExportExplicitParameters()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ExportParameters()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ToByteArray()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ToXmlString()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "ECDsa": {
          "doc": "",
          "doc_formatted": {},
          "Create()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Create(System.Security.Cryptography:ECCurve)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "curve": ""
            },
            "return": ""
          },
          "Create(System.Security.Cryptography:ECParameters)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "parameters": ""
            },
            "return": ""
          },
          "Create(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "algorithm": ""
            },
            "return": ""
          },
          "ExportExplicitParameters(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "includePrivateParameters": ""
            },
            "return": ""
          },
          "ExportParameters(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "includePrivateParameters": ""
            },
            "return": ""
          },
          "GenerateKey(System.Security.Cryptography:ECCurve)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "curve": ""
            }
          },
          "ImportParameters(System.Security.Cryptography:ECParameters)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "parameters": ""
            }
          },
          "SignData(System.IO:Stream, System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "SignData(System:Array[System:Byte], System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "SignData(System:Array[System:Byte], System:Int32, System:Int32, System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "offset": "",
              "count": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "SignHash(System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hash": ""
            },
            "return": ""
          },
          "VerifyData(System.IO:Stream, System:Array[System:Byte], System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "signature": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "VerifyData(System:Array[System:Byte], System:Array[System:Byte], System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "signature": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "VerifyData(System:Array[System:Byte], System:Int32, System:Int32, System:Array[System:Byte], System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "offset": "",
              "count": "",
              "signature": "",
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "VerifyHash(System:Array[System:Byte], System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hash": "",
              "signature": ""
            },
            "return": ""
          }
        },
        "ECDsaCng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Security.Cryptography:CngKey)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "key": ""
            }
          },
          "__init__(System.Security.Cryptography:ECCurve)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "curve": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keySize": ""
            }
          },
          "HashAlgorithm": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Key": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "FromXmlString(System:String, System.Security.Cryptography:ECKeyXmlFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "xml": "",
              "format": ""
            }
          },
          "SignData(System.IO:Stream)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": ""
            },
            "return": ""
          },
          "SignData(System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": ""
            },
            "return": ""
          },
          "SignData(System:Array[System:Byte], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "offset": "",
              "count": ""
            },
            "return": ""
          },
          "ToXmlString(System.Security.Cryptography:ECKeyXmlFormat)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "format": ""
            },
            "return": ""
          },
          "VerifyData(System.IO:Stream, System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "signature": ""
            },
            "return": ""
          },
          "VerifyData(System:Array[System:Byte], System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "signature": ""
            },
            "return": ""
          },
          "VerifyData(System:Array[System:Byte], System:Int32, System:Int32, System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "offset": "",
              "count": "",
              "signature": ""
            },
            "return": ""
          }
        },
        "ECKeyXmlFormat": {
          "doc": "",
          "doc_formatted": {},
          "Rfc4050": {
            "doc": ""
          }
        },
        "ECParameters": {
          "doc": "",
          "doc_formatted": {},
          "Curve": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "D": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Q": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Validate()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "ECPoint": {
          "doc": "",
          "doc_formatted": {},
          "X": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Y": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "EncryptionMode": {
          "doc": "",
          "doc_formatted": {},
          "Encrypt": {
            "doc": ""
          },
          "Decrypt": {
            "doc": ""
          }
        },
        "HASHALGORITHM_ENUM": {
          "doc": "",
          "doc_formatted": {},
          "DSA_HASH_ALGORITHM_SHA1": {
            "doc": ""
          },
          "DSA_HASH_ALGORITHM_SHA256": {
            "doc": ""
          },
          "DSA_HASH_ALGORITHM_SHA512": {
            "doc": ""
          }
        },
        "IncrementalHash": {
          "doc": "",
          "doc_formatted": {},
          "AlgorithmName": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "AppendData(System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": ""
            }
          },
          "AppendData(System:Array[System:Byte], System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "offset": "",
              "count": ""
            }
          },
          "CreateHMAC(System.Security.Cryptography:HashAlgorithmName, System:Array[System:Byte])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hashAlgorithm": "",
              "key": ""
            },
            "return": ""
          },
          "CreateHash(System.Security.Cryptography:HashAlgorithmName)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "hashAlgorithm": ""
            },
            "return": ""
          },
          "GetHashAndReset()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "MD5Cng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "ManifestSignatureInformation": {
          "doc": "",
          "doc_formatted": {},
          "AuthenticodeSignature": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Manifest": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StrongNameSignature": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "VerifySignature(System:ActivationContext)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "application": ""
            },
            "return": ""
          },
          "VerifySignature(System:ActivationContext, System.Security:ManifestKinds)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "application": "",
              "manifests": ""
            },
            "return": ""
          },
          "VerifySignature(System:ActivationContext, System.Security:ManifestKinds, System.Security.Cryptography.X509Certificates:X509RevocationFlag, System.Security.Cryptography.X509Certificates:X509RevocationMode)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "application": "",
              "manifests": "",
              "revocationFlag": "",
              "revocationMode": ""
            },
            "return": ""
          }
        },
        "ManifestSignatureInformationCollection": {
          "doc": "",
          "doc_formatted": {}
        },
        "NCryptNative": {
          "doc": "",
          "doc_formatted": {}
        },
        "RSACng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Security.Cryptography:CngKey)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "key": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keySize": ""
            }
          },
          "Key": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "Rfc4050KeyFormatter": {
          "doc": "",
          "doc_formatted": {}
        },
        "SHA1Cng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SHA256Cng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SHA256CryptoServiceProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SHA384Cng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SHA384CryptoServiceProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SHA512Cng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SHA512CryptoServiceProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "SafeLocalAllocHandle": {
          "doc": "",
          "doc_formatted": {}
        },
        "SignatureVerificationResult": {
          "doc": "",
          "doc_formatted": {},
          "Valid": {
            "doc": ""
          },
          "AssemblyIdentityMismatch": {
            "doc": ""
          },
          "ContainingSignatureInvalid": {
            "doc": ""
          },
          "PublicKeyTokenMismatch": {
            "doc": ""
          },
          "PublisherMismatch": {
            "doc": ""
          },
          "SystemError": {
            "doc": ""
          },
          "InvalidSignerCertificate": {
            "doc": ""
          },
          "InvalidCountersignature": {
            "doc": ""
          },
          "InvalidCertificateSignature": {
            "doc": ""
          },
          "InvalidTimestamp": {
            "doc": ""
          },
          "BadDigest": {
            "doc": ""
          },
          "BasicConstraintsNotObserved": {
            "doc": ""
          },
          "UnknownTrustProvider": {
            "doc": ""
          },
          "UnknownVerificationAction": {
            "doc": ""
          },
          "BadSignatureFormat": {
            "doc": ""
          },
          "CertificateNotExplicitlyTrusted": {
            "doc": ""
          },
          "MissingSignature": {
            "doc": ""
          },
          "CertificateExpired": {
            "doc": ""
          },
          "InvalidTimePeriodNesting": {
            "doc": ""
          },
          "InvalidCertificateRole": {
            "doc": ""
          },
          "PathLengthConstraintViolated": {
            "doc": ""
          },
          "UnknownCriticalExtension": {
            "doc": ""
          },
          "CertificateUsageNotAllowed": {
            "doc": ""
          },
          "IssuerChainingError": {
            "doc": ""
          },
          "CertificateMalformed": {
            "doc": ""
          },
          "UntrustedRootCertificate": {
            "doc": ""
          },
          "CouldNotBuildChain": {
            "doc": ""
          },
          "GenericTrustFailure": {
            "doc": ""
          },
          "CertificateRevoked": {
            "doc": ""
          },
          "UntrustedTestRootCertificate": {
            "doc": ""
          },
          "RevocationCheckFailure": {
            "doc": ""
          },
          "InvalidCertificateUsage": {
            "doc": ""
          },
          "CertificateExplicitlyDistrusted": {
            "doc": ""
          },
          "UntrustedCertificationAuthority": {
            "doc": ""
          },
          "InvalidCertificatePolicy": {
            "doc": ""
          },
          "InvalidCertificateName": {
            "doc": ""
          }
        },
        "StrongNameSignatureInformation": {
          "doc": "",
          "doc_formatted": {},
          "HResult": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "HashAlgorithm": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsValid": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "PublicKey": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "VerificationResult": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "TripleDESCng": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keyName": ""
            }
          },
          "__init__(System:String, System.Security.Cryptography:CngProvider)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keyName": "",
              "provider": ""
            }
          },
          "__init__(System:String, System.Security.Cryptography:CngProvider, System.Security.Cryptography:CngKeyOpenOptions)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "keyName": "",
              "provider": "",
              "openOptions": ""
            }
          }
        },
        "X509Utils": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "Xml": {
          "doc": "",
          "ManifestSignedXml": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System.Xml:XmlDocument, System.Security:ManifestKinds)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "manifestXml": "",
                "manifest": ""
              }
            },
            "VerifySignature(System.Security.Cryptography.X509Certificates:X509RevocationFlag, System.Security.Cryptography.X509Certificates:X509RevocationMode)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "revocationFlag": "",
                "revocationMode": ""
              },
              "return": ""
            }
          }
        },
        "X509Certificates": {
          "doc": "",
          "AuthenticodeSignatureInformation": {
            "doc": "",
            "doc_formatted": {},
            "Description": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "DescriptionUrl": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "HResult": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "HashAlgorithm": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SignatureChain": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SigningCertificate": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Timestamp": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "TrustStatus": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "VerificationResult": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "CertificateExtensionsCommon": {
            "doc": "",
            "doc_formatted": {}
          },
          "CertificateRequest": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System.Security.Cryptography.X509Certificates:X500DistinguishedName, System.Security.Cryptography.X509Certificates:PublicKey, System.Security.Cryptography:HashAlgorithmName)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "subjectName": "",
                "publicKey": "",
                "hashAlgorithm": ""
              }
            },
            "__init__(System.Security.Cryptography.X509Certificates:X500DistinguishedName, System.Security.Cryptography:ECDsa, System.Security.Cryptography:HashAlgorithmName)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "subjectName": "",
                "key": "",
                "hashAlgorithm": ""
              }
            },
            "__init__(System:String, System.Security.Cryptography:ECDsa, System.Security.Cryptography:HashAlgorithmName)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "subjectName": "",
                "key": "",
                "hashAlgorithm": ""
              }
            },
            "__init__(System.Security.Cryptography.X509Certificates:X500DistinguishedName, System.Security.Cryptography:RSA, System.Security.Cryptography:HashAlgorithmName, System.Security.Cryptography:RSASignaturePadding)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "subjectName": "",
                "key": "",
                "hashAlgorithm": "",
                "padding": ""
              }
            },
            "__init__(System:String, System.Security.Cryptography:RSA, System.Security.Cryptography:HashAlgorithmName, System.Security.Cryptography:RSASignaturePadding)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "subjectName": "",
                "key": "",
                "hashAlgorithm": "",
                "padding": ""
              }
            },
            "CertificateExtensions": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "HashAlgorithm": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "PublicKey": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SubjectName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Create(System.Security.Cryptography.X509Certificates:X509Certificate2, System:DateTimeOffset, System:DateTimeOffset, System:Array[System:Byte])": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "issuerCertificate": "",
                "notBefore": "",
                "notAfter": "",
                "serialNumber": ""
              },
              "return": ""
            },
            "Create(System.Security.Cryptography.X509Certificates:X500DistinguishedName, System.Security.Cryptography.X509Certificates:X509SignatureGenerator, System:DateTimeOffset, System:DateTimeOffset, System:Array[System:Byte])": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "issuerName": "",
                "generator": "",
                "notBefore": "",
                "notAfter": "",
                "serialNumber": ""
              },
              "return": ""
            },
            "CreateSelfSigned(System:DateTimeOffset, System:DateTimeOffset)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "notBefore": "",
                "notAfter": ""
              },
              "return": ""
            },
            "CreateSigningRequest()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            },
            "CreateSigningRequest(System.Security.Cryptography.X509Certificates:X509SignatureGenerator)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "signatureGenerator": ""
              },
              "return": ""
            }
          },
          "DSACertificateExtensions": {
            "doc": "",
            "doc_formatted": {},
            "CopyWithPrivateKey(System.Security.Cryptography.X509Certificates:X509Certificate2, System.Security.Cryptography:DSA)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": "",
                "privateKey": ""
              },
              "return": ""
            },
            "GetDSAPrivateKey(System.Security.Cryptography.X509Certificates:X509Certificate2)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": ""
              },
              "return": ""
            },
            "GetDSAPublicKey(System.Security.Cryptography.X509Certificates:X509Certificate2)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": ""
              },
              "return": ""
            }
          },
          "DerEncoder": {
            "doc": "",
            "doc_formatted": {}
          },
          "DerSequenceReader": {
            "doc": "",
            "doc_formatted": {}
          },
          "ECDsaCertificateExtensions": {
            "doc": "",
            "doc_formatted": {},
            "CopyWithPrivateKey(System.Security.Cryptography.X509Certificates:X509Certificate2, System.Security.Cryptography:ECDsa)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": "",
                "privateKey": ""
              },
              "return": ""
            },
            "GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates:X509Certificate2)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": ""
              },
              "return": ""
            },
            "GetECDsaPublicKey(System.Security.Cryptography.X509Certificates:X509Certificate2)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": ""
              },
              "return": ""
            }
          },
          "ECDsaX509SignatureGenerator": {
            "doc": "",
            "doc_formatted": {}
          },
          "EncodingHelpers": {
            "doc": "",
            "doc_formatted": {}
          },
          "GeneralNameEncoder": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            }
          },
          "Oids": {
            "doc": "",
            "doc_formatted": {},
            "AnyCertPolicy": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ApplicationCertPolicies": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "AuthorityInformationAccess": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "BasicConstraints": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "BasicConstraints2": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CertPolicies": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CertPolicyConstraints": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CertPolicyMappings": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CertificateAuthorityIssuers": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CertificateTemplate": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CommonName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CrlDistributionPoints": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "DsaDsa": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ECDsaSha256": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ECDsaSha384": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ECDsaSha512": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Ecc": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EccCurveSecp256r1": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EccCurveSecp384r1": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EccCurveSecp521r1": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EmailAddress": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EnhancedKeyUsage": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EnrollCertTypeExtension": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "InhibitAnyPolicyExtension": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "IssuerAltName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "KeyUsage": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Mgf1": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Organization": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "OrganizationalUnit": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Pkcs9ExtensionRequest": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RsaPkcs1Sha256": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RsaPkcs1Sha384": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RsaPkcs1Sha512": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RsaRsa": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RsaSsaPss": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Sha256": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Sha384": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Sha512": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SubjectAltName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SubjectKeyIdentifier": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "UserPrincipalName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "PinAndClear": {
            "doc": "",
            "doc_formatted": {}
          },
          "Pkcs10CertificationRequestInfo": {
            "doc": "",
            "doc_formatted": {}
          },
          "Pkcs9ExtensionRequest": {
            "doc": "",
            "doc_formatted": {}
          },
          "RSACertificateExtensions": {
            "doc": "",
            "doc_formatted": {},
            "CopyWithPrivateKey(System.Security.Cryptography.X509Certificates:X509Certificate2, System.Security.Cryptography:RSA)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": "",
                "privateKey": ""
              },
              "return": ""
            },
            "GetRSAPrivateKey(System.Security.Cryptography.X509Certificates:X509Certificate2)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": ""
              },
              "return": ""
            },
            "GetRSAPublicKey(System.Security.Cryptography.X509Certificates:X509Certificate2)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "certificate": ""
              },
              "return": ""
            }
          },
          "RSAPkcs1X509SignatureGenerator": {
            "doc": "",
            "doc_formatted": {}
          },
          "RSAPssX509SignatureGenerator": {
            "doc": "",
            "doc_formatted": {}
          },
          "SafeCertContextHandle": {
            "doc": "",
            "doc_formatted": {}
          },
          "SubjectAlternativeNameBuilder": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "AddDnsName(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "dnsName": ""
              }
            },
            "AddEmailAddress(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "emailAddress": ""
              }
            },
            "AddIpAddress(System.Net:IPAddress)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ipAddress": ""
              }
            },
            "AddUri(System:Uri)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "uri": ""
              }
            },
            "AddUserPrincipalName(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "upn": ""
              }
            },
            "Build(System:Boolean)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "critical": ""
              },
              "return": ""
            }
          },
          "TbsCertificate": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "Extensions": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Issuer": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "NotAfter": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "NotBefore": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "PublicKey": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SerialNumber": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SignatureAlgorithm": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Subject": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Version": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "TimestampInformation": {
            "doc": "",
            "doc_formatted": {},
            "HResult": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "HashAlgorithm": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "IsValid": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SignatureChain": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SigningCertificate": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Timestamp": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "VerificationResult": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "TrustStatus": {
            "doc": "",
            "doc_formatted": {},
            "Untrusted": {
              "doc": ""
            },
            "UnknownIdentity": {
              "doc": ""
            },
            "KnownIdentity": {
              "doc": ""
            },
            "Trusted": {
              "doc": ""
            }
          },
          "X501Attribute": {
            "doc": "",
            "doc_formatted": {}
          },
          "X509Native": {
            "doc": "",
            "doc_formatted": {},
            "AXL_AUTHENTICODE_SIGNER_INFO": {
              "doc": "",
              "doc_formatted": {}
            },
            "AXL_AUTHENTICODE_TIMESTAMPER_INFO": {
              "doc": "",
              "doc_formatted": {}
            },
            "AxlVerificationFlags": {
              "doc": "",
              "doc_formatted": {},
              "None": {
                "doc": ""
              },
              "NoRevocationCheck": {
                "doc": ""
              },
              "RevocationCheckEndCertOnly": {
                "doc": ""
              },
              "RevocationCheckEntireChain": {
                "doc": ""
              },
              "UrlOnlyCacheRetrieval": {
                "doc": ""
              },
              "LifetimeSigning": {
                "doc": ""
              },
              "TrustMicrosoftRootOnly": {
                "doc": ""
              }
            },
            "UnsafeNativeMethods": {
              "doc": "",
              "doc_formatted": {}
            }
          },
          "X509SignatureGenerator": {
            "doc": "",
            "doc_formatted": {},
            "PublicKey": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CreateForECDsa(System.Security.Cryptography:ECDsa)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "key": ""
              },
              "return": ""
            },
            "CreateForRSA(System.Security.Cryptography:RSA, System.Security.Cryptography:RSASignaturePadding)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "key": "",
                "signaturePadding": ""
              },
              "return": ""
            },
            "GetSignatureAlgorithmIdentifier(System.Security.Cryptography:HashAlgorithmName)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "hashAlgorithm": ""
              },
              "return": ""
            },
            "SignData(System:Array[System:Byte], System.Security.Cryptography:HashAlgorithmName)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "data": "",
                "hashAlgorithm": ""
              },
              "return": ""
            }
          }
        }
      }
    },
    "Runtime": {
      "doc": "",
      "InteropServices": {
        "doc": "",
        "ComAwareEventInfo": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Type, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "type": "",
              "eventName": ""
            }
          }
        }
      },
      "CompilerServices": {
        "doc": "",
        "CallSite": {
          "doc": "",
          "doc_formatted": {},
          "Binder": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Create(System:Type, System.Runtime.CompilerServices:CallSiteBinder)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": ""
            },
            "return": ""
          }
        },
        "CallSite[$T]": {
          "doc": "",
          "doc_formatted": {},
          "Target": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Binder": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Create(System.Runtime.CompilerServices:CallSiteBinder)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": ""
            },
            "return": ""
          }
        },
        "CallSiteBinder": {
          "doc": "",
          "doc_formatted": {},
          "UpdateLabel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Bind(System:Array[System:Object], System.Collections.ObjectModel:ReadOnlyCollection[System.Linq.Expressions:ParameterExpression], System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "args": "",
              "parameters": "",
              "returnLabel": ""
            },
            "return": ""
          },
          "BindDelegate(System.Runtime.CompilerServices:CallSite[$T], System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": "",
              "args": ""
            },
            "return": ""
          }
        },
        "CallSiteHelpers": {
          "doc": "",
          "doc_formatted": {},
          "IsInternalFrame(System.Reflection:MethodBase)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mb": ""
            },
            "return": ""
          }
        },
        "CallSiteOps": {
          "doc": "",
          "doc_formatted": {},
          "AddRule(System.Runtime.CompilerServices:CallSite[$T], $T)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": "",
              "rule": ""
            }
          },
          "Bind(System.Runtime.CompilerServices:CallSiteBinder, System.Runtime.CompilerServices:CallSite[$T], System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "site": "",
              "args": ""
            },
            "return": ""
          },
          "ClearMatch(System.Runtime.CompilerServices:CallSite)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": ""
            }
          },
          "CreateMatchmaker(System.Runtime.CompilerServices:CallSite[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": ""
            },
            "return": ""
          },
          "GetCachedRules(System.Runtime.CompilerServices:RuleCache[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "cache": ""
            },
            "return": ""
          },
          "GetMatch(System.Runtime.CompilerServices:CallSite)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": ""
            },
            "return": ""
          },
          "GetRuleCache(System.Runtime.CompilerServices:CallSite[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": ""
            },
            "return": ""
          },
          "GetRules(System.Runtime.CompilerServices:CallSite[$T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": ""
            },
            "return": ""
          },
          "MoveRule(System.Runtime.CompilerServices:RuleCache[$T], $T, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "cache": "",
              "rule": "",
              "i": ""
            }
          },
          "SetNotMatched(System.Runtime.CompilerServices:CallSite)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "site": ""
            },
            "return": ""
          },
          "UpdateRules(System.Runtime.CompilerServices:CallSite[$T], System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "this": "",
              "matched": ""
            }
          }
        },
        "Closure": {
          "doc": "",
          "doc_formatted": {},
          "Constants": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Locals": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__init__(System:Array[System:Object], System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "constants": "",
              "locals": ""
            }
          }
        },
        "DebugInfoGenerator": {
          "doc": "",
          "doc_formatted": {},
          "CreatePdbGenerator()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "MarkSequencePoint(System.Linq.Expressions:LambdaExpression, System:Int32, System.Linq.Expressions:DebugInfoExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "ilOffset": "",
              "sequencePoint": ""
            }
          }
        },
        "DynamicAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:Array[System:Boolean])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "transformFlags": ""
            }
          },
          "TransformFlags": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ExecutionScope": {
          "doc": "",
          "doc_formatted": {},
          "Globals": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Locals": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Parent": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CreateDelegate(System:Int32, System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "indexLambda": "",
              "locals": ""
            },
            "return": ""
          },
          "CreateHoistedLocals()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "IsolateExpression(System.Linq.Expressions:Expression, System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "locals": ""
            },
            "return": ""
          }
        },
        "IRuntimeVariables": {
          "doc": "",
          "doc_formatted": {},
          "Count": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Item": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__getitem__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": ""
            },
            "return": ""
          },
          "__setitem__(System:Int32, System:Object)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": "",
              "value": ""
            }
          }
        },
        "IStrongBox": {
          "doc": "",
          "doc_formatted": {},
          "Value": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ReadOnlyCollectionBuilder[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System.Collections.Generic:IEnumerable[$T])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "collection": ""
            }
          },
          "__init__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "capacity": ""
            }
          },
          "Capacity": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Reverse()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "Reverse(System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": "",
              "count": ""
            }
          },
          "ToArray()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ToReadOnlyCollection()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "RuleCache[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "RuntimeOps": {
          "doc": "",
          "doc_formatted": {},
          "CreateRuntimeVariables()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "CreateRuntimeVariables(System:Array[System:Object], System:Array[System:Int64])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "data": "",
              "indexes": ""
            },
            "return": ""
          },
          "ExpandoCheckVersion(System.Dynamic:ExpandoObject, System:Object)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expando": "",
              "version": ""
            },
            "return": ""
          },
          "ExpandoPromoteClass(System.Dynamic:ExpandoObject, System:Object, System:Object)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expando": "",
              "oldClass": "",
              "newClass": ""
            }
          },
          "ExpandoTryDeleteValue(System.Dynamic:ExpandoObject, System:Object, System:Int32, System:String, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expando": "",
              "indexClass": "",
              "index": "",
              "name": "",
              "ignoreCase": ""
            },
            "return": ""
          },
          "ExpandoTryGetValue(System.Dynamic:ExpandoObject, System:Object, System:Int32, System:String, System:Boolean, System:*Object)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expando": "",
              "indexClass": "",
              "index": "",
              "name": "",
              "ignoreCase": "",
              "value": ""
            },
            "return": ""
          },
          "ExpandoTrySetValue(System.Dynamic:ExpandoObject, System:Object, System:Int32, System:Object, System:String, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expando": "",
              "indexClass": "",
              "index": "",
              "value": "",
              "name": "",
              "ignoreCase": ""
            },
            "return": ""
          },
          "MergeRuntimeVariables(System.Runtime.CompilerServices:IRuntimeVariables, System.Runtime.CompilerServices:IRuntimeVariables, System:Array[System:Int32])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "first": "",
              "second": "",
              "indexes": ""
            },
            "return": ""
          },
          "Quote(System.Linq.Expressions:Expression, System:Object, System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "hoistedLocals": "",
              "locals": ""
            },
            "return": ""
          }
        },
        "StrongBox[$T]": {
          "doc": "",
          "doc_formatted": {},
          "Value": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__($T)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "value": ""
            }
          }
        },
        "SymbolDocumentGenerator": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "TrueReadOnlyCollection[$T]": {
          "doc": "",
          "doc_formatted": {}
        }
      }
    },
    "Linq": {
      "doc": "",
      "AggregationMinMaxHelpers[$T]": {
        "doc": "",
        "doc_formatted": {}
      },
      "Buffer[$TElement]": {
        "doc": "",
        "doc_formatted": {}
      },
      "EmptyEnumerable[$TElement]": {
        "doc": "",
        "doc_formatted": {},
        "Instance": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        }
      },
      "Enumerable": {
        "doc": "",
        "doc_formatted": {},
        "Aggregate(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TSource, $TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "func": ""
          },
          "return": ""
        },
        "Aggregate(System.Collections.Generic:IEnumerable[$TSource], $TAccumulate, System:Func[$TAccumulate, $TSource, $TAccumulate])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "func": ""
          },
          "return": ""
        },
        "Aggregate(System.Collections.Generic:IEnumerable[$TSource], $TAccumulate, System:Func[$TAccumulate, $TSource, $TAccumulate], System:Func[$TAccumulate, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "func": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "All(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Any(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Any(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Append(System.Collections.Generic:IEnumerable[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "element": ""
          },
          "return": ""
        },
        "AsEnumerable(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Cast(System.Collections:IEnumerable)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Concat(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Contains(System.Collections.Generic:IEnumerable[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "value": ""
          },
          "return": ""
        },
        "Contains(System.Collections.Generic:IEnumerable[$TSource], $TSource, System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "value": "",
            "comparer": ""
          },
          "return": ""
        },
        "Count(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Count(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "DefaultIfEmpty(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "DefaultIfEmpty(System.Collections.Generic:IEnumerable[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "defaultValue": ""
          },
          "return": ""
        },
        "Distinct(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Distinct(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "comparer": ""
          },
          "return": ""
        },
        "ElementAt(System.Collections.Generic:IEnumerable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "index": ""
          },
          "return": ""
        },
        "ElementAtOrDefault(System.Collections.Generic:IEnumerable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "index": ""
          },
          "return": ""
        },
        "Empty()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "Except(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Except(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "First(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "First(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "FirstOrDefault(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "FirstOrDefault(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TSource], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TSource], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupJoin(System.Collections.Generic:IEnumerable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupJoin(System.Collections.Generic:IEnumerable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Intersect(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Intersect(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Join(System.Collections.Generic:IEnumerable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, $TInner, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Join(System.Collections.Generic:IEnumerable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, $TInner, $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Last(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Last(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "LastOrDefault(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "LastOrDefault(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "LongCount(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "LongCount(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "OfType(System.Collections:IEnumerable)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "OrderBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "OrderBy(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "OrderByDescending(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "OrderByDescending(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Prepend(System.Collections.Generic:IEnumerable[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "element": ""
          },
          "return": ""
        },
        "Range(System:Int32, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "start": "",
            "count": ""
          },
          "return": ""
        },
        "Repeat($TResult, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "element": "",
            "count": ""
          },
          "return": ""
        },
        "Reverse(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Select(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Select(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System.Collections.Generic:IEnumerable[$TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32, System.Collections.Generic:IEnumerable[$TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System.Collections.Generic:IEnumerable[$TCollection]], System:Func[$TSource, $TCollection, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "collectionSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "SelectMany(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32, System.Collections.Generic:IEnumerable[$TCollection]], System:Func[$TSource, $TCollection, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "collectionSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Single(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Single(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "SingleOrDefault(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "SingleOrDefault(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Skip(System.Collections.Generic:IEnumerable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "count": ""
          },
          "return": ""
        },
        "SkipWhile(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "SkipWhile(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Take(System.Collections.Generic:IEnumerable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "count": ""
          },
          "return": ""
        },
        "TakeWhile(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "TakeWhile(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "ThenBy(System.Linq:IOrderedEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ThenBy(System.Linq:IOrderedEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ThenByDescending(System.Linq:IOrderedEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ThenByDescending(System.Linq:IOrderedEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToArray(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "ToDictionary(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ToDictionary(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToDictionary(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "ToDictionary(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToHashSet(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "ToHashSet(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToList(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "ToLookup(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ToLookup(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToLookup(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "ToLookup(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Union(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Union(System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Where(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Where(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, System:Int32, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Zip(System.Collections.Generic:IEnumerable[$TFirst], System.Collections.Generic:IEnumerable[$TSecond], System:Func[$TFirst, $TSecond, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "resultSelector": ""
          },
          "return": ""
        }
      },
      "EnumerableExecutor": {
        "doc": "",
        "doc_formatted": {}
      },
      "EnumerableExecutor[$T]": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "expression": ""
          }
        }
      },
      "EnumerableQuery": {
        "doc": "",
        "doc_formatted": {}
      },
      "EnumerableQuery[$T]": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Collections.Generic:IEnumerable[$T])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "enumerable": ""
          }
        },
        "__init__(System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "expression": ""
          }
        }
      },
      "EnumerableRewriter": {
        "doc": "",
        "doc_formatted": {}
      },
      "EnumerableSorter[$TElement]": {
        "doc": "",
        "doc_formatted": {}
      },
      "EnumerableSorter[$TElement, $TKey]": {
        "doc": "",
        "doc_formatted": {}
      },
      "Error": {
        "doc": "",
        "doc_formatted": {}
      },
      "GroupedEnumerable[$TSource, $TKey, $TElement, $TResult]": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": "",
            "comparer": ""
          }
        }
      },
      "GroupedEnumerable[$TSource, $TKey, $TElement]": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Collections.Generic:IEnumerable[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          }
        }
      },
      "IGrouping[$TKey, $TElement]": {
        "doc": "",
        "doc_formatted": {},
        "Key": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "IIListProvider[$TElement]": {
        "doc": "",
        "doc_formatted": {},
        "GetCount(System:Boolean)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "onlyIfCheap": ""
          },
          "return": ""
        },
        "ToArray()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "ToList()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        }
      },
      "ILookup[$TKey, $TElement]": {
        "doc": "",
        "doc_formatted": {},
        "Count": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Item": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Contains($TKey)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "key": ""
          },
          "return": ""
        },
        "__getitem__($TKey)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "key": ""
          },
          "return": ""
        }
      },
      "IOrderedEnumerable[$TElement]": {
        "doc": "",
        "doc_formatted": {},
        "CreateOrderedEnumerable(System:Func[$TElement, $TKey], System.Collections.Generic:IComparer[$TKey], System:Boolean)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "keySelector": "",
            "comparer": "",
            "descending": ""
          },
          "return": ""
        }
      },
      "IOrderedQueryable": {
        "doc": "",
        "doc_formatted": {}
      },
      "IOrderedQueryable[$T]": {
        "doc": "",
        "doc_formatted": {}
      },
      "IQueryProvider": {
        "doc": "",
        "doc_formatted": {},
        "CreateQuery(System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "expression": ""
          },
          "return": ""
        },
        "Execute(System.Linq.Expressions:Expression)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "expression": ""
          },
          "return": ""
        }
      },
      "IQueryable": {
        "doc": "",
        "doc_formatted": {},
        "ElementType": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Expression": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Provider": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "IQueryable[$T]": {
        "doc": "",
        "doc_formatted": {},
        "ElementType": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Expression": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Provider": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "IdentityFunction[$TElement]": {
        "doc": "",
        "doc_formatted": {},
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        },
        "Instance": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "Lookup[$TKey, $TElement]": {
        "doc": "",
        "doc_formatted": {},
        "ApplyResultSelector(System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "resultSelector": ""
          },
          "return": ""
        }
      },
      "OrderedEnumerable[$TElement]": {
        "doc": "",
        "doc_formatted": {}
      },
      "OrderedEnumerable[$TElement, $TKey]": {
        "doc": "",
        "doc_formatted": {}
      },
      "OrderedParallelQuery[$TSource]": {
        "doc": "",
        "doc_formatted": {}
      },
      "ParallelEnumerable": {
        "doc": "",
        "doc_formatted": {},
        "Aggregate(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TSource, $TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "func": ""
          },
          "return": ""
        },
        "Aggregate(System.Linq:ParallelQuery[$TSource], $TAccumulate, System:Func[$TAccumulate, $TSource, $TAccumulate])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "func": ""
          },
          "return": ""
        },
        "Aggregate(System.Linq:ParallelQuery[$TSource], $TAccumulate, System:Func[$TAccumulate, $TSource, $TAccumulate], System:Func[$TAccumulate, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "func": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Aggregate(System.Linq:ParallelQuery[$TSource], $TAccumulate, System:Func[$TAccumulate, $TSource, $TAccumulate], System:Func[$TAccumulate, $TAccumulate, $TAccumulate], System:Func[$TAccumulate, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "updateAccumulatorFunc": "",
            "combineAccumulatorsFunc": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Aggregate(System.Linq:ParallelQuery[$TSource], System:Func[$TAccumulate], System:Func[$TAccumulate, $TSource, $TAccumulate], System:Func[$TAccumulate, $TAccumulate, $TAccumulate], System:Func[$TAccumulate, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seedFactory": "",
            "updateAccumulatorFunc": "",
            "combineAccumulatorsFunc": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "All(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Any(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Any(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "AsEnumerable(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsOrdered(System.Linq:ParallelQuery)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsOrdered(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsParallel(System.Collections.Concurrent:Partitioner[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsParallel(System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsParallel(System.Collections:IEnumerable)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsSequential(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsUnordered(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Cast(System.Linq:ParallelQuery)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Concat(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Concat(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Contains(System.Linq:ParallelQuery[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "value": ""
          },
          "return": ""
        },
        "Contains(System.Linq:ParallelQuery[$TSource], $TSource, System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "value": "",
            "comparer": ""
          },
          "return": ""
        },
        "Count(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Count(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "DefaultIfEmpty(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "DefaultIfEmpty(System.Linq:ParallelQuery[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "defaultValue": ""
          },
          "return": ""
        },
        "Distinct(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Distinct(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "comparer": ""
          },
          "return": ""
        },
        "ElementAt(System.Linq:ParallelQuery[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "index": ""
          },
          "return": ""
        },
        "ElementAtOrDefault(System.Linq:ParallelQuery[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "index": ""
          },
          "return": ""
        },
        "Empty()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "Except(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Except(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Except(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Except(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "First(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "First(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "FirstOrDefault(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "FirstOrDefault(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "ForAll(System.Linq:ParallelQuery[$TSource], System:Action[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "action": ""
          }
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TSource], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TSource], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupJoin(System.Linq:ParallelQuery[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupJoin(System.Linq:ParallelQuery[$TOuter], System.Linq:ParallelQuery[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupJoin(System.Linq:ParallelQuery[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupJoin(System.Linq:ParallelQuery[$TOuter], System.Linq:ParallelQuery[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Intersect(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Intersect(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Intersect(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Intersect(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Join(System.Linq:ParallelQuery[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, $TInner, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Join(System.Linq:ParallelQuery[$TOuter], System.Linq:ParallelQuery[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, $TInner, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Join(System.Linq:ParallelQuery[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, $TInner, $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Join(System.Linq:ParallelQuery[$TOuter], System.Linq:ParallelQuery[$TInner], System:Func[$TOuter, $TKey], System:Func[$TInner, $TKey], System:Func[$TOuter, $TInner, $TResult], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Last(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Last(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "LastOrDefault(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "LastOrDefault(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "LongCount(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "LongCount(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Max(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "OfType(System.Linq:ParallelQuery)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "OrderBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "OrderBy(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "OrderByDescending(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "OrderByDescending(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Range(System:Int32, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "start": "",
            "count": ""
          },
          "return": ""
        },
        "Repeat($TResult, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "element": "",
            "count": ""
          },
          "return": ""
        },
        "Reverse(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Select(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Select(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System.Collections.Generic:IEnumerable[$TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32, System.Collections.Generic:IEnumerable[$TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System.Collections.Generic:IEnumerable[$TCollection]], System:Func[$TSource, $TCollection, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "collectionSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32, System.Collections.Generic:IEnumerable[$TCollection]], System:Func[$TSource, $TCollection, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "collectionSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Single(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Single(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "SingleOrDefault(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "SingleOrDefault(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Skip(System.Linq:ParallelQuery[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "count": ""
          },
          "return": ""
        },
        "SkipWhile(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "SkipWhile(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Take(System.Linq:ParallelQuery[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "count": ""
          },
          "return": ""
        },
        "TakeWhile(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "TakeWhile(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "ThenBy(System.Linq:OrderedParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ThenBy(System.Linq:OrderedParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ThenByDescending(System.Linq:OrderedParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ThenByDescending(System.Linq:OrderedParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToArray(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "ToDictionary(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ToDictionary(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToDictionary(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "ToDictionary(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToList(System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "ToLookup(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ToLookup(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ToLookup(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "ToLookup(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, $TKey], System:Func[$TSource, $TElement], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Union(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Union(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": ""
          },
          "return": ""
        },
        "Union(System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Union(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelQuery[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "comparer": ""
          },
          "return": ""
        },
        "Where(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Where(System.Linq:ParallelQuery[$TSource], System:Func[$TSource, System:Int32, System:Boolean])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "WithCancellation(System.Linq:ParallelQuery[$TSource], System.Threading:CancellationToken)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "cancellationToken": ""
          },
          "return": ""
        },
        "WithDegreeOfParallelism(System.Linq:ParallelQuery[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "degreeOfParallelism": ""
          },
          "return": ""
        },
        "WithExecutionMode(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelExecutionMode)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "executionMode": ""
          },
          "return": ""
        },
        "WithMergeOptions(System.Linq:ParallelQuery[$TSource], System.Linq:ParallelMergeOptions)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "mergeOptions": ""
          },
          "return": ""
        },
        "Zip(System.Linq:ParallelQuery[$TFirst], System.Collections.Generic:IEnumerable[$TSecond], System:Func[$TFirst, $TSecond, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Zip(System.Linq:ParallelQuery[$TFirst], System.Linq:ParallelQuery[$TSecond], System:Func[$TFirst, $TSecond, $TResult])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "first": "",
            "second": "",
            "resultSelector": ""
          },
          "return": ""
        }
      },
      "ParallelExecutionMode": {
        "doc": "",
        "doc_formatted": {},
        "Default": {
          "doc": ""
        },
        "ForceParallelism": {
          "doc": ""
        }
      },
      "ParallelMergeOptions": {
        "doc": "",
        "doc_formatted": {},
        "Default": {
          "doc": ""
        },
        "NotBuffered": {
          "doc": ""
        },
        "AutoBuffered": {
          "doc": ""
        },
        "FullyBuffered": {
          "doc": ""
        }
      },
      "ParallelQuery": {
        "doc": "",
        "doc_formatted": {}
      },
      "ParallelQuery[$TSource]": {
        "doc": "",
        "doc_formatted": {}
      },
      "Queryable": {
        "doc": "",
        "doc_formatted": {},
        "Aggregate(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TSource, $TSource]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "func": ""
          },
          "return": ""
        },
        "Aggregate(System.Linq:IQueryable[$TSource], $TAccumulate, System.Linq.Expressions:Expression[System:Func[$TAccumulate, $TSource, $TAccumulate]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "func": ""
          },
          "return": ""
        },
        "Aggregate(System.Linq:IQueryable[$TSource], $TAccumulate, System.Linq.Expressions:Expression[System:Func[$TAccumulate, $TSource, $TAccumulate]], System.Linq.Expressions:Expression[System:Func[$TAccumulate, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "seed": "",
            "func": "",
            "selector": ""
          },
          "return": ""
        },
        "All(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Any(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Any(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "AsQueryable(System.Collections.Generic:IEnumerable[$TElement])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "AsQueryable(System.Collections:IEnumerable)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Decimal?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Decimal]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Double?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Double]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int64?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int64]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Single?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Average(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Single]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Cast(System.Linq:IQueryable)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Concat(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": ""
          },
          "return": ""
        },
        "Contains(System.Linq:IQueryable[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "item": ""
          },
          "return": ""
        },
        "Contains(System.Linq:IQueryable[$TSource], $TSource, System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "item": "",
            "comparer": ""
          },
          "return": ""
        },
        "Count(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Count(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "DefaultIfEmpty(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "DefaultIfEmpty(System.Linq:IQueryable[$TSource], $TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "defaultValue": ""
          },
          "return": ""
        },
        "Distinct(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Distinct(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "comparer": ""
          },
          "return": ""
        },
        "ElementAt(System.Linq:IQueryable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "index": ""
          },
          "return": ""
        },
        "ElementAtOrDefault(System.Linq:IQueryable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "index": ""
          },
          "return": ""
        },
        "Except(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": ""
          },
          "return": ""
        },
        "Except(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": "",
            "comparer": ""
          },
          "return": ""
        },
        "First(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "First(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "FirstOrDefault(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "FirstOrDefault(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Linq.Expressions:Expression[System:Func[$TKey, System.Collections.Generic:IEnumerable[$TSource], $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Linq.Expressions:Expression[System:Func[$TSource, $TElement]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Linq.Expressions:Expression[System:Func[$TKey, System.Collections.Generic:IEnumerable[$TSource], $TResult]], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Linq.Expressions:Expression[System:Func[$TSource, $TElement]], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Linq.Expressions:Expression[System:Func[$TSource, $TElement]], System.Linq.Expressions:Expression[System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Linq.Expressions:Expression[System:Func[$TSource, $TElement]], System.Linq.Expressions:Expression[System:Func[$TKey, System.Collections.Generic:IEnumerable[$TElement], $TResult]], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "elementSelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "GroupJoin(System.Linq:IQueryable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System.Linq.Expressions:Expression[System:Func[$TOuter, $TKey]], System.Linq.Expressions:Expression[System:Func[$TInner, $TKey]], System.Linq.Expressions:Expression[System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "GroupJoin(System.Linq:IQueryable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System.Linq.Expressions:Expression[System:Func[$TOuter, $TKey]], System.Linq.Expressions:Expression[System:Func[$TInner, $TKey]], System.Linq.Expressions:Expression[System:Func[$TOuter, System.Collections.Generic:IEnumerable[$TInner], $TResult]], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Intersect(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": ""
          },
          "return": ""
        },
        "Intersect(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": "",
            "comparer": ""
          },
          "return": ""
        },
        "Join(System.Linq:IQueryable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System.Linq.Expressions:Expression[System:Func[$TOuter, $TKey]], System.Linq.Expressions:Expression[System:Func[$TInner, $TKey]], System.Linq.Expressions:Expression[System:Func[$TOuter, $TInner, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "Join(System.Linq:IQueryable[$TOuter], System.Collections.Generic:IEnumerable[$TInner], System.Linq.Expressions:Expression[System:Func[$TOuter, $TKey]], System.Linq.Expressions:Expression[System:Func[$TInner, $TKey]], System.Linq.Expressions:Expression[System:Func[$TOuter, $TInner, $TResult]], System.Collections.Generic:IEqualityComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "outer": "",
            "inner": "",
            "outerKeySelector": "",
            "innerKeySelector": "",
            "resultSelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Last(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Last(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "LastOrDefault(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "LastOrDefault(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "LongCount(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "LongCount(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Max(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Max(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Min(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Min(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "OfType(System.Linq:IQueryable)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "OrderBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "OrderBy(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "OrderByDescending(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "OrderByDescending(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Reverse(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Select(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Select(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System.Collections.Generic:IEnumerable[$TResult]]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32, System.Collections.Generic:IEnumerable[$TResult]]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System.Collections.Generic:IEnumerable[$TCollection]]], System.Linq.Expressions:Expression[System:Func[$TSource, $TCollection, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "collectionSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "SelectMany(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32, System.Collections.Generic:IEnumerable[$TCollection]]], System.Linq.Expressions:Expression[System:Func[$TSource, $TCollection, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "collectionSelector": "",
            "resultSelector": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": ""
          },
          "return": ""
        },
        "SequenceEqual(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": "",
            "comparer": ""
          },
          "return": ""
        },
        "Single(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Single(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "SingleOrDefault(System.Linq:IQueryable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "SingleOrDefault(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Skip(System.Linq:IQueryable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "count": ""
          },
          "return": ""
        },
        "SkipWhile(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "SkipWhile(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Decimal?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Decimal])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Double?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Double])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Int32?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Int32])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Int64?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Int64])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Single?])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[System:Single])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Decimal?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Decimal]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Double?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Double]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int64?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int64]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Single?]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Sum(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Single]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "selector": ""
          },
          "return": ""
        },
        "Take(System.Linq:IQueryable[$TSource], System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "count": ""
          },
          "return": ""
        },
        "TakeWhile(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "TakeWhile(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "ThenBy(System.Linq:IOrderedQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ThenBy(System.Linq:IOrderedQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "ThenByDescending(System.Linq:IOrderedQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": ""
          },
          "return": ""
        },
        "ThenByDescending(System.Linq:IOrderedQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, $TKey]], System.Collections.Generic:IComparer[$TKey])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "keySelector": "",
            "comparer": ""
          },
          "return": ""
        },
        "Union(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": ""
          },
          "return": ""
        },
        "Union(System.Linq:IQueryable[$TSource], System.Collections.Generic:IEnumerable[$TSource], System.Collections.Generic:IEqualityComparer[$TSource])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": "",
            "comparer": ""
          },
          "return": ""
        },
        "Where(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Where(System.Linq:IQueryable[$TSource], System.Linq.Expressions:Expression[System:Func[$TSource, System:Int32, System:Boolean]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source": "",
            "predicate": ""
          },
          "return": ""
        },
        "Zip(System.Linq:IQueryable[$TFirst], System.Collections.Generic:IEnumerable[$TSecond], System.Linq.Expressions:Expression[System:Func[$TFirst, $TSecond, $TResult]])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "source1": "",
            "source2": "",
            "resultSelector": ""
          },
          "return": ""
        }
      },
      "SR": {
        "doc": "",
        "doc_formatted": {},
        "Resources": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "GetObject(System:String)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "name": ""
          },
          "return": ""
        },
        "GetString(System:String)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "name": ""
          },
          "return": ""
        },
        "GetString(System:String, System:*Boolean)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "name": "",
            "usedFallback": ""
          },
          "return": ""
        },
        "GetString(System:String, System:Array[System:Object])": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "name": "",
            "args": ""
          },
          "return": ""
        }
      },
      "SRCategoryAttribute": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System:String)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "category": ""
          }
        }
      },
      "SRDescriptionAttribute": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System:String)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "description": ""
          }
        }
      },
      "Set[$TElement]": {
        "doc": "",
        "doc_formatted": {},
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        },
        "__init__(System.Collections.Generic:IEqualityComparer[$TElement])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "comparer": ""
          }
        },
        "Add($TElement)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "value": ""
          },
          "return": ""
        },
        "Contains($TElement)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "value": ""
          },
          "return": ""
        },
        "Remove($TElement)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "value": ""
          },
          "return": ""
        }
      },
      "SingleLinkedNode[$TSource]": {
        "doc": "",
        "doc_formatted": {},
        "__init__($TSource)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "item": ""
          }
        },
        "Item": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Linked": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "Add($TSource)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "item": ""
          },
          "return": ""
        },
        "GetCount()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        },
        "GetEnumerator(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "count": ""
          },
          "return": ""
        },
        "GetNode(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "index": ""
          },
          "return": ""
        },
        "ToArray(System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "count": ""
          },
          "return": ""
        },
        "__getitem__()": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "return": ""
        }
      },
      "Strings": {
        "doc": "",
        "doc_formatted": {}
      },
      "SystemCore_EnumerableDebugView[$T]": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Collections.Generic:IEnumerable[$T])": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "enumerable": ""
          }
        },
        "Items": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "SystemCore_EnumerableDebugView": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System.Collections:IEnumerable)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "enumerable": ""
          }
        },
        "Items": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "SystemCore_EnumerableDebugViewEmptyException": {
        "doc": "",
        "doc_formatted": {},
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        },
        "Empty": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "TypeHelper": {
        "doc": "",
        "doc_formatted": {}
      },
      "Parallel": {
        "doc": "",
        "AnyAllSearchOperator[$TInput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ArrayMergeHelper[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Linq.Parallel:QuerySettings, System.Linq.Parallel:QueryResults[$TInputOutput])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "settings": "",
              "queryResults": ""
            }
          }
        },
        "AssociativeAggregationOperator[$TInput, $TIntermediate, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "AsynchronousChannel[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "AsynchronousChannelMergeEnumerator[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "BinaryQueryOperator[$TLeftInput, $TRightInput, $TOutput]": {
          "doc": "",
          "doc_formatted": {},
          "WrapPartitionedStream(System.Linq.Parallel:PartitionedStream[$TLeftInput, $TLeftKey], System.Linq.Parallel:PartitionedStream[$TRightInput, $TRightKey], System.Linq.Parallel:IPartitionedStreamRecipient[$TOutput], System:Boolean, System.Linq.Parallel:QuerySettings)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "leftPartitionedStream": "",
              "rightPartitionedStream": "",
              "outputRecipient": "",
              "preferStriping": "",
              "settings": ""
            }
          }
        },
        "CancellableEnumerable": {
          "doc": "",
          "doc_formatted": {}
        },
        "CancellationState": {
          "doc": "",
          "doc_formatted": {}
        },
        "ConcatKey[$TLeftKey, $TRightKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ConcatQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ContainsSearchOperator[$TInput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "CountAggregationOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "DecimalAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "DecimalMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "DecimalSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "DefaultIfEmptyQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "DefaultMergeHelper[$TInputOutput, $TIgnoreKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "DistinctQueryOperator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "DoubleAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "DoubleMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "DoubleSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "ElementAtQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "EmptyEnumerable[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "EmptyEnumerator[$T]": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "EnumerableWrapperWeakToStrong": {
          "doc": "",
          "doc_formatted": {}
        },
        "ExceptQueryOperator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ExceptionAggregator": {
          "doc": "",
          "doc_formatted": {}
        },
        "ExchangeUtilities": {
          "doc": "",
          "doc_formatted": {}
        },
        "FirstQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "FixedMaxHeap[$TElement]": {
          "doc": "",
          "doc_formatted": {}
        },
        "FloatAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "FloatMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "FloatSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "ForAllOperator[$TInput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ForAllSpoolingTask[$TInputOutput, $TIgnoreKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GroupByElementSelectorQueryOperatorEnumerator[$TSource, $TGroupKey, $TElement, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GroupByGrouping[$TGroupKey, $TElement]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GroupByIdentityQueryOperatorEnumerator[$TSource, $TGroupKey, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GroupByQueryOperator[$TSource, $TGroupKey, $TElement]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GroupByQueryOperatorEnumerator[$TSource, $TGroupKey, $TElement, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GroupJoinQueryOperator[$TLeftInput, $TRightInput, $TKey, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "GrowingArray[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "HashJoinQueryOperatorEnumerator[$TLeftInput, $TLeftKey, $TRightInput, $THashKey, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "HashLookup[$TKey, $TValue]": {
          "doc": "",
          "doc_formatted": {}
        },
        "HashRepartitionEnumerator[$TInputOutput, $THashKey, $TIgnoreKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "HashRepartitionStream[$TInputOutput, $THashKey, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "IMergeHelper[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {},
          "Execute()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "GetEnumerator()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "GetResultsAsArray()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "IParallelPartitionable[$T]": {
          "doc": "",
          "doc_formatted": {},
          "GetPartitions(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "partitionCount": ""
            },
            "return": ""
          }
        },
        "IPartitionedStreamRecipient[$TElement]": {
          "doc": "",
          "doc_formatted": {},
          "Receive(System.Linq.Parallel:PartitionedStream[$TElement, $TKey])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "partitionedStream": ""
            }
          }
        },
        "IndexedSelectQueryOperator[$TInput, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "IndexedWhereQueryOperator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "InlinedAggregationOperator[$TSource, $TIntermediate, $TResult]": {
          "doc": "",
          "doc_formatted": {}
        },
        "InlinedAggregationOperatorEnumerator[$TIntermediate]": {
          "doc": "",
          "doc_formatted": {}
        },
        "IntAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "IntMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "IntSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "IntValueEvent": {
          "doc": "",
          "doc_formatted": {}
        },
        "IntersectQueryOperator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "JoinQueryOperator[$TLeftInput, $TRightInput, $TKey, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "LastQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ListChunk[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ListQueryResults[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "LongAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "LongCountAggregationOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "LongMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "LongSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "Lookup[$TKey, $TElement]": {
          "doc": "",
          "doc_formatted": {}
        },
        "MergeEnumerator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "MergeExecutor[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "NoKeyMemoizationRequired": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableDecimalAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableDecimalMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableDecimalSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableDoubleAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableDoubleMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableDoubleSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableFloatAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableFloatMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableFloatSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableIntAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableIntMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableIntSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableLongAverageAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableLongMinMaxAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "NullableLongSumAggregationOperator": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderPreservingMergeHelper[$TInputOutput, $TKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderPreservingPipeliningMergeHelper[$TOutput, $TKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderPreservingPipeliningSpoolingTask[$TOutput, $TKey]": {
          "doc": "",
          "doc_formatted": {},
          "Spool(System.Linq.Parallel:QueryTaskGroupState, System.Linq.Parallel:PartitionedStream[$TOutput, $TKey], System:Array[System:Boolean], System:Array[System:Boolean], System:Array[System:Boolean], System:Array[System.Collections.Generic:Queue[System.Linq.Parallel:Pair[$TKey, $TOutput]]], System:Array[System:Object], System.Threading.Tasks:TaskScheduler, System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "groupState": "",
              "partitions": "",
              "consumerWaiting": "",
              "producerWaiting": "",
              "producerDone": "",
              "buffers": "",
              "bufferLocks": "",
              "taskScheduler": "",
              "autoBuffered": ""
            }
          }
        },
        "OrderPreservingSpoolingTask[$TInputOutput, $TKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderedGroupByElementSelectorQueryOperatorEnumerator[$TSource, $TGroupKey, $TElement, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderedGroupByGrouping[$TGroupKey, $TOrderKey, $TElement]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderedGroupByIdentityQueryOperatorEnumerator[$TSource, $TGroupKey, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderedGroupByQueryOperatorEnumerator[$TSource, $TGroupKey, $TElement, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderedHashRepartitionEnumerator[$TInputOutput, $THashKey, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderedHashRepartitionStream[$TInputOutput, $THashKey, $TOrderKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "OrderingQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Linq.Parallel:QueryOperator[$TSource], System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "child": "",
              "orderOn": ""
            }
          }
        },
        "OrdinalIndexState": {
          "doc": "",
          "doc_formatted": {},
          "Indexible": {
            "doc": ""
          },
          "Correct": {
            "doc": ""
          },
          "Increasing": {
            "doc": ""
          },
          "Shuffled": {
            "doc": ""
          }
        },
        "Pair[$T, $U]": {
          "doc": "",
          "doc_formatted": {},
          "__init__($T, $U)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "first": "",
              "second": ""
            }
          },
          "First": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Second": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PairComparer[$T, $U]": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Collections.Generic:IComparer[$T], System.Collections.Generic:IComparer[$U])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "comparer1": "",
              "comparer2": ""
            }
          }
        },
        "ParallelEnumerableWrapper": {
          "doc": "",
          "doc_formatted": {}
        },
        "ParallelEnumerableWrapper[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PartitionedDataSource[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PartitionedStream[$TElement, $TKey]": {
          "doc": "",
          "doc_formatted": {},
          "PartitionCount": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PartitionedStreamMerger[$TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PartitionerQueryOperator[$TElement]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PipelineSpoolingTask[$TInputOutput, $TIgnoreKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PlinqEtwProvider": {
          "doc": "",
          "doc_formatted": {},
          "Tasks": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "Producer[$TKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ProducerComparerInt": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "QueryAggregationOptions": {
          "doc": "",
          "doc_formatted": {},
          "None": {
            "doc": ""
          },
          "Associative": {
            "doc": ""
          },
          "Commutative": {
            "doc": ""
          },
          "AssociativeCommutative": {
            "doc": ""
          }
        },
        "QueryExecutionOption[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "QueryLifecycle": {
          "doc": "",
          "doc_formatted": {}
        },
        "QueryOpeningEnumerator[$TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "QueryOperator[$TOutput]": {
          "doc": "",
          "doc_formatted": {},
          "GetEnumerator(System.Linq:ParallelMergeOptions?)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "mergeOptions": ""
            },
            "return": ""
          }
        },
        "QueryOperatorEnumerator[$TElement, $TKey]": {
          "doc": "",
          "doc_formatted": {},
          "Dispose()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "QueryResults[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "QuerySettings": {
          "doc": "",
          "doc_formatted": {},
          "CleanStateAtQueryEnd()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          }
        },
        "QueryTask": {
          "doc": "",
          "doc_formatted": {}
        },
        "QueryTaskGroupState": {
          "doc": "",
          "doc_formatted": {}
        },
        "RangeEnumerable": {
          "doc": "",
          "doc_formatted": {}
        },
        "RepeatEnumerable[$TResult]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ReverseComparer[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ReverseQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ScanQueryOperator[$TElement]": {
          "doc": "",
          "doc_formatted": {},
          "Data": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "Scheduling": {
          "doc": "",
          "doc_formatted": {}
        },
        "SelectManyQueryOperator[$TLeftInput, $TRightInput, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SelectQueryOperator[$TInput, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "Shared[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SingleQueryOperator[$TSource]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SortHelper[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SortHelper[$TInputOutput, $TKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SortQueryOperator[$TInputOutput, $TSortKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SortQueryOperatorEnumerator[$TInputOutput, $TKey, $TSortKey]": {
          "doc": "",
          "doc_formatted": {},
          "KeyComparer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "SortQueryOperatorResults[$TInputOutput, $TSortKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SpoolingTask": {
          "doc": "",
          "doc_formatted": {}
        },
        "SpoolingTaskBase": {
          "doc": "",
          "doc_formatted": {}
        },
        "StopAndGoSpoolingTask[$TInputOutput, $TIgnoreKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SynchronousChannel[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SynchronousChannelMergeEnumerator[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "TakeOrSkipQueryOperator[$TResult]": {
          "doc": "",
          "doc_formatted": {}
        },
        "TakeOrSkipWhileQueryOperator[$TResult]": {
          "doc": "",
          "doc_formatted": {}
        },
        "TraceHelpers": {
          "doc": "",
          "doc_formatted": {}
        },
        "UnaryQueryOperator[$TInput, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "UnionQueryOperator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "UnorderedHashRepartitionStream[$TInputOutput, $THashKey, $TIgnoreKey]": {
          "doc": "",
          "doc_formatted": {}
        },
        "Util": {
          "doc": "",
          "doc_formatted": {}
        },
        "WhereQueryOperator[$TInputOutput]": {
          "doc": "",
          "doc_formatted": {}
        },
        "Wrapper[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "WrapperEqualityComparer[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "ZipQueryOperator[$TLeftInput, $TRightInput, $TOutput]": {
          "doc": "",
          "doc_formatted": {}
        }
      },
      "Expressions": {
        "doc": "",
        "AnalyzeTypeIsResult": {
          "doc": "",
          "doc_formatted": {},
          "KnownFalse": {
            "doc": ""
          },
          "KnownTrue": {
            "doc": ""
          },
          "KnownAssignable": {
            "doc": ""
          },
          "Unknown": {
            "doc": ""
          }
        },
        "ArgumentProviderOps": {
          "doc": "",
          "doc_formatted": {}
        },
        "AssignBinaryExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "BinaryExpression": {
          "doc": "",
          "doc_formatted": {},
          "Conversion": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsLifted": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsLiftedToNull": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Left": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Method": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Right": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Linq.Expressions:LambdaExpression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "conversion": "",
              "right": ""
            },
            "return": ""
          }
        },
        "Block2": {
          "doc": "",
          "doc_formatted": {}
        },
        "Block3": {
          "doc": "",
          "doc_formatted": {}
        },
        "Block4": {
          "doc": "",
          "doc_formatted": {}
        },
        "Block5": {
          "doc": "",
          "doc_formatted": {}
        },
        "BlockExpression": {
          "doc": "",
          "doc_formatted": {},
          "Expressions": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Result": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Variables": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression], System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variables": "",
              "expressions": ""
            },
            "return": ""
          }
        },
        "BlockExpressionList": {
          "doc": "",
          "doc_formatted": {}
        },
        "BlockN": {
          "doc": "",
          "doc_formatted": {}
        },
        "ByRefParameterExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "CatchBlock": {
          "doc": "",
          "doc_formatted": {},
          "Body": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Filter": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Test": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Variable": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:ParameterExpression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variable": "",
              "filter": "",
              "body": ""
            },
            "return": ""
          }
        },
        "ClearDebugInfoExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "CoalesceConversionBinaryExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "ConditionalExpression": {
          "doc": "",
          "doc_formatted": {},
          "IfFalse": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IfTrue": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Test": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "test": "",
              "ifTrue": "",
              "ifFalse": ""
            },
            "return": ""
          }
        },
        "ConstantCheck": {
          "doc": "",
          "doc_formatted": {}
        },
        "ConstantExpression": {
          "doc": "",
          "doc_formatted": {},
          "Value": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "DebugInfoExpression": {
          "doc": "",
          "doc_formatted": {},
          "Document": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EndColumn": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EndLine": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsClear": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StartColumn": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "StartLine": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "DebugViewWriter": {
          "doc": "",
          "doc_formatted": {}
        },
        "DefaultExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "DynamicExpression": {
          "doc": "",
          "doc_formatted": {},
          "Arguments": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Binder": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arguments": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arguments": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arguments": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arguments": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arguments": ""
            },
            "return": ""
          }
        },
        "DynamicExpression1": {
          "doc": "",
          "doc_formatted": {}
        },
        "DynamicExpression2": {
          "doc": "",
          "doc_formatted": {}
        },
        "DynamicExpression3": {
          "doc": "",
          "doc_formatted": {}
        },
        "DynamicExpression4": {
          "doc": "",
          "doc_formatted": {}
        },
        "DynamicExpressionN": {
          "doc": "",
          "doc_formatted": {}
        },
        "DynamicExpressionVisitor": {
          "doc": "",
          "doc_formatted": {}
        },
        "ElementInit": {
          "doc": "",
          "doc_formatted": {},
          "AddMethod": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Arguments": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arguments": ""
            },
            "return": ""
          }
        },
        "Error": {
          "doc": "",
          "doc_formatted": {}
        },
        "Expression": {
          "doc": "",
          "doc_formatted": {},
          "CanReduce": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NodeType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Type": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Add(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Add(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "AddAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "AddAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "AddAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "AddAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "AddAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "AddAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "AddChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "AddChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "And(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "And(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "AndAlso(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "AndAlso(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "AndAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "AndAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "AndAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "ArrayAccess(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "indexes": ""
            },
            "return": ""
          },
          "ArrayAccess(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "indexes": ""
            },
            "return": ""
          },
          "ArrayIndex(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "indexes": ""
            },
            "return": ""
          },
          "ArrayIndex(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "index": ""
            },
            "return": ""
          },
          "ArrayIndex(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": "",
              "indexes": ""
            },
            "return": ""
          },
          "ArrayLength(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "array": ""
            },
            "return": ""
          },
          "Assign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Bind(System.Reflection:MemberInfo, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "member": "",
              "expression": ""
            },
            "return": ""
          },
          "Bind(System.Reflection:MethodInfo, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "propertyAccessor": "",
              "expression": ""
            },
            "return": ""
          },
          "Block(System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expressions": ""
            },
            "return": ""
          },
          "Block(System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expressions": ""
            },
            "return": ""
          },
          "Block(System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression], System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variables": "",
              "expressions": ""
            },
            "return": ""
          },
          "Block(System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression], System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variables": "",
              "expressions": ""
            },
            "return": ""
          },
          "Block(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "Block(System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "expressions": ""
            },
            "return": ""
          },
          "Block(System:Type, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "expressions": ""
            },
            "return": ""
          },
          "Block(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "Block(System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression], System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "variables": "",
              "expressions": ""
            },
            "return": ""
          },
          "Block(System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression], System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "variables": "",
              "expressions": ""
            },
            "return": ""
          },
          "Block(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "Block(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": "",
              "arg4": ""
            },
            "return": ""
          },
          "Break(System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": ""
            },
            "return": ""
          },
          "Break(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": ""
            },
            "return": ""
          },
          "Break(System.Linq.Expressions:LabelTarget, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "type": ""
            },
            "return": ""
          },
          "Break(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": "",
              "type": ""
            },
            "return": ""
          },
          "Call(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "method": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arguments": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arg0": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arguments": ""
            },
            "return": ""
          },
          "Call(System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "method": "",
              "arguments": ""
            },
            "return": ""
          },
          "Call(System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "method": "",
              "arguments": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "Call(System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "method": "",
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "Call(System.Linq.Expressions:Expression, System:String, System:Array[System:Type], System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "methodName": "",
              "typeArguments": "",
              "arguments": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "Call(System:Type, System:String, System:Array[System:Type], System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "methodName": "",
              "typeArguments": "",
              "arguments": ""
            },
            "return": ""
          },
          "Call(System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "Call(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": "",
              "arg4": ""
            },
            "return": ""
          },
          "Catch(System.Linq.Expressions:ParameterExpression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variable": "",
              "body": ""
            },
            "return": ""
          },
          "Catch(System:Type, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "body": ""
            },
            "return": ""
          },
          "Catch(System.Linq.Expressions:ParameterExpression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variable": "",
              "body": "",
              "filter": ""
            },
            "return": ""
          },
          "Catch(System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "body": "",
              "filter": ""
            },
            "return": ""
          },
          "ClearDebugInfo(System.Linq.Expressions:SymbolDocumentInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "document": ""
            },
            "return": ""
          },
          "Coalesce(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Coalesce(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "conversion": ""
            },
            "return": ""
          },
          "Condition(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "test": "",
              "ifTrue": "",
              "ifFalse": ""
            },
            "return": ""
          },
          "Condition(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "test": "",
              "ifTrue": "",
              "ifFalse": "",
              "type": ""
            },
            "return": ""
          },
          "Constant(System:Object)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": ""
            },
            "return": ""
          },
          "Constant(System:Object, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": "",
              "type": ""
            },
            "return": ""
          },
          "Continue(System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": ""
            },
            "return": ""
          },
          "Continue(System.Linq.Expressions:LabelTarget, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "type": ""
            },
            "return": ""
          },
          "Convert(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": ""
            },
            "return": ""
          },
          "Convert(System.Linq.Expressions:Expression, System:Type, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": "",
              "method": ""
            },
            "return": ""
          },
          "ConvertChecked(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": ""
            },
            "return": ""
          },
          "ConvertChecked(System.Linq.Expressions:Expression, System:Type, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": "",
              "method": ""
            },
            "return": ""
          },
          "DebugInfo(System.Linq.Expressions:SymbolDocumentInfo, System:Int32, System:Int32, System:Int32, System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "document": "",
              "startLine": "",
              "startColumn": "",
              "endLine": "",
              "endColumn": ""
            },
            "return": ""
          },
          "Decrement(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "Decrement(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Default(System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": ""
            },
            "return": ""
          },
          "Divide(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Divide(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "DivideAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "DivideAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "DivideAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arguments": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arguments": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "Dynamic(System.Runtime.CompilerServices:CallSiteBinder, System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binder": "",
              "returnType": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "ElementInit(System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "addMethod": "",
              "arguments": ""
            },
            "return": ""
          },
          "ElementInit(System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "addMethod": "",
              "arguments": ""
            },
            "return": ""
          },
          "Empty()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Equal(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Equal(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "ExclusiveOr(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "ExclusiveOr(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "ExclusiveOrAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "ExclusiveOrAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "ExclusiveOrAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "Field(System.Linq.Expressions:Expression, System.Reflection:FieldInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "field": ""
            },
            "return": ""
          },
          "Field(System.Linq.Expressions:Expression, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "fieldName": ""
            },
            "return": ""
          },
          "Field(System.Linq.Expressions:Expression, System:Type, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": "",
              "fieldName": ""
            },
            "return": ""
          },
          "GetActionType(System:Array[System:Type])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "typeArgs": ""
            },
            "return": ""
          },
          "GetDelegateType(System:Array[System:Type])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "typeArgs": ""
            },
            "return": ""
          },
          "GetFuncType(System:Array[System:Type])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "typeArgs": ""
            },
            "return": ""
          },
          "Goto(System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": ""
            },
            "return": ""
          },
          "Goto(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": ""
            },
            "return": ""
          },
          "Goto(System.Linq.Expressions:LabelTarget, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "type": ""
            },
            "return": ""
          },
          "Goto(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": "",
              "type": ""
            },
            "return": ""
          },
          "GreaterThan(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "GreaterThan(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "GreaterThanOrEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "GreaterThanOrEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "IfThen(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "test": "",
              "ifTrue": ""
            },
            "return": ""
          },
          "IfThenElse(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "test": "",
              "ifTrue": "",
              "ifFalse": ""
            },
            "return": ""
          },
          "Increment(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "Increment(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Invoke(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "arguments": ""
            },
            "return": ""
          },
          "Invoke(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "arguments": ""
            },
            "return": ""
          },
          "IsFalse(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "IsFalse(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "IsTrue(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "IsTrue(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Label()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Label(System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": ""
            },
            "return": ""
          },
          "Label(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": ""
            },
            "return": ""
          },
          "Label(System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": ""
            },
            "return": ""
          },
          "Label(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "defaultValue": ""
            },
            "return": ""
          },
          "Label(System:Type, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "name": ""
            },
            "return": ""
          },
          "Lambda(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System.Linq.Expressions:Expression, System:Boolean, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "tailCall": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System.Linq.Expressions:Expression, System:Boolean, System:Array[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "tailCall": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System.Linq.Expressions:Expression, System:String, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "name": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System:Type, System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "body": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System:Type, System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "body": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System.Linq.Expressions:Expression, System:String, System:Boolean, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "name": "",
              "tailCall": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System:Type, System.Linq.Expressions:Expression, System:Boolean, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "body": "",
              "tailCall": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System:Type, System.Linq.Expressions:Expression, System:Boolean, System:Array[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "body": "",
              "tailCall": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System:Type, System.Linq.Expressions:Expression, System:String, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "body": "",
              "name": "",
              "parameters": ""
            },
            "return": ""
          },
          "Lambda(System:Type, System.Linq.Expressions:Expression, System:String, System:Boolean, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "body": "",
              "name": "",
              "tailCall": "",
              "parameters": ""
            },
            "return": ""
          },
          "LeftShift(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "LeftShift(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "LeftShiftAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "LeftShiftAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "LeftShiftAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "LessThan(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "LessThan(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "LessThanOrEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "LessThanOrEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "ListBind(System.Reflection:MemberInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "member": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListBind(System.Reflection:MemberInfo, System:Array[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "member": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListBind(System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "propertyAccessor": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListBind(System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "propertyAccessor": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListInit(System.Linq.Expressions:NewExpression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListInit(System.Linq.Expressions:NewExpression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListInit(System.Linq.Expressions:NewExpression, System:Array[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListInit(System.Linq.Expressions:NewExpression, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListInit(System.Linq.Expressions:NewExpression, System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "addMethod": "",
              "initializers": ""
            },
            "return": ""
          },
          "ListInit(System.Linq.Expressions:NewExpression, System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "addMethod": "",
              "initializers": ""
            },
            "return": ""
          },
          "Loop(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": ""
            },
            "return": ""
          },
          "Loop(System.Linq.Expressions:Expression, System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "_break": ""
            },
            "return": ""
          },
          "Loop(System.Linq.Expressions:Expression, System.Linq.Expressions:LabelTarget, System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "_break": "",
              "_continue": ""
            },
            "return": ""
          },
          "MakeBinary(System.Linq.Expressions:ExpressionType, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binaryType": "",
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "MakeBinary(System.Linq.Expressions:ExpressionType, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binaryType": "",
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "MakeBinary(System.Linq.Expressions:ExpressionType, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "binaryType": "",
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "MakeCatchBlock(System:Type, System.Linq.Expressions:ParameterExpression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "variable": "",
              "body": "",
              "filter": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arguments": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arguments": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": "",
              "arg1": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "MakeDynamic(System:Type, System.Runtime.CompilerServices:CallSiteBinder, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "delegateType": "",
              "binder": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "MakeGoto(System.Linq.Expressions:GotoExpressionKind, System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "kind": "",
              "target": "",
              "value": "",
              "type": ""
            },
            "return": ""
          },
          "MakeIndex(System.Linq.Expressions:Expression, System.Reflection:PropertyInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "indexer": "",
              "arguments": ""
            },
            "return": ""
          },
          "MakeMemberAccess(System.Linq.Expressions:Expression, System.Reflection:MemberInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "member": ""
            },
            "return": ""
          },
          "MakeTry(System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:CatchBlock])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "body": "",
              "_finally": "",
              "fault": "",
              "handlers": ""
            },
            "return": ""
          },
          "MakeUnary(System.Linq.Expressions:ExpressionType, System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "unaryType": "",
              "operand": "",
              "type": ""
            },
            "return": ""
          },
          "MakeUnary(System.Linq.Expressions:ExpressionType, System.Linq.Expressions:Expression, System:Type, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "unaryType": "",
              "operand": "",
              "type": "",
              "method": ""
            },
            "return": ""
          },
          "MemberBind(System.Reflection:MemberInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "member": "",
              "bindings": ""
            },
            "return": ""
          },
          "MemberBind(System.Reflection:MemberInfo, System:Array[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "member": "",
              "bindings": ""
            },
            "return": ""
          },
          "MemberBind(System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "propertyAccessor": "",
              "bindings": ""
            },
            "return": ""
          },
          "MemberBind(System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "propertyAccessor": "",
              "bindings": ""
            },
            "return": ""
          },
          "MemberInit(System.Linq.Expressions:NewExpression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "bindings": ""
            },
            "return": ""
          },
          "MemberInit(System.Linq.Expressions:NewExpression, System:Array[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "bindings": ""
            },
            "return": ""
          },
          "Modulo(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Modulo(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "ModuloAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "ModuloAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "ModuloAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "Multiply(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Multiply(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "MultiplyAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "MultiplyAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "MultiplyAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "MultiplyAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "MultiplyAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "MultiplyAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "MultiplyChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "MultiplyChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "Negate(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "Negate(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "NegateChecked(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "NegateChecked(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "New(System.Reflection:ConstructorInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "constructor": ""
            },
            "return": ""
          },
          "New(System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": ""
            },
            "return": ""
          },
          "New(System.Reflection:ConstructorInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "constructor": "",
              "arguments": ""
            },
            "return": ""
          },
          "New(System.Reflection:ConstructorInfo, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "constructor": "",
              "arguments": ""
            },
            "return": ""
          },
          "New(System.Reflection:ConstructorInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression], System.Collections.Generic:IEnumerable[System.Reflection:MemberInfo])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "constructor": "",
              "arguments": "",
              "members": ""
            },
            "return": ""
          },
          "New(System.Reflection:ConstructorInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression], System:Array[System.Reflection:MemberInfo])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "constructor": "",
              "arguments": "",
              "members": ""
            },
            "return": ""
          },
          "NewArrayBounds(System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "bounds": ""
            },
            "return": ""
          },
          "NewArrayBounds(System:Type, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "bounds": ""
            },
            "return": ""
          },
          "NewArrayInit(System:Type, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "initializers": ""
            },
            "return": ""
          },
          "NewArrayInit(System:Type, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "initializers": ""
            },
            "return": ""
          },
          "Not(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "Not(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "NotEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "NotEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Boolean, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "liftToNull": "",
              "method": ""
            },
            "return": ""
          },
          "OnesComplement(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "OnesComplement(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Or(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Or(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "OrAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "OrAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "OrAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "OrElse(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "OrElse(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "Parameter(System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": ""
            },
            "return": ""
          },
          "Parameter(System:Type, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "name": ""
            },
            "return": ""
          },
          "PostDecrementAssign(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "PostDecrementAssign(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "PostIncrementAssign(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "PostIncrementAssign(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Power(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Power(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "PowerAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "PowerAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "PowerAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "PreDecrementAssign(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "PreDecrementAssign(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "PreIncrementAssign(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "PreIncrementAssign(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "propertyAccessor": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System.Reflection:PropertyInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "property": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "propertyName": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System.Reflection:PropertyInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "indexer": "",
              "arguments": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System.Reflection:PropertyInfo, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "indexer": "",
              "arguments": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System:String, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instance": "",
              "propertyName": "",
              "arguments": ""
            },
            "return": ""
          },
          "Property(System.Linq.Expressions:Expression, System:Type, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": "",
              "propertyName": ""
            },
            "return": ""
          },
          "PropertyOrField(System.Linq.Expressions:Expression, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "propertyOrFieldName": ""
            },
            "return": ""
          },
          "Quote(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "Reduce()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReduceAndCheck()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReduceExtensions()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReferenceEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "ReferenceNotEqual(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Rethrow()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Rethrow(System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": ""
            },
            "return": ""
          },
          "Return(System.Linq.Expressions:LabelTarget)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": ""
            },
            "return": ""
          },
          "Return(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": ""
            },
            "return": ""
          },
          "Return(System.Linq.Expressions:LabelTarget, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "type": ""
            },
            "return": ""
          },
          "Return(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": "",
              "type": ""
            },
            "return": ""
          },
          "RightShift(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "RightShift(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "RightShiftAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "RightShiftAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "RightShiftAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "RuntimeVariables(System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variables": ""
            },
            "return": ""
          },
          "RuntimeVariables(System:Array[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variables": ""
            },
            "return": ""
          },
          "Subtract(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "Subtract(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "SubtractAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "SubtractAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "SubtractAssign(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "SubtractAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "SubtractAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "SubtractAssignChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Linq.Expressions:LambdaExpression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": "",
              "conversion": ""
            },
            "return": ""
          },
          "SubtractChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": ""
            },
            "return": ""
          },
          "SubtractChecked(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "left": "",
              "right": "",
              "method": ""
            },
            "return": ""
          },
          "Switch(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:SwitchCase])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "switchValue": "",
              "cases": ""
            },
            "return": ""
          },
          "Switch(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:SwitchCase])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "switchValue": "",
              "defaultBody": "",
              "cases": ""
            },
            "return": ""
          },
          "Switch(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:SwitchCase])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "switchValue": "",
              "defaultBody": "",
              "comparison": "",
              "cases": ""
            },
            "return": ""
          },
          "Switch(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:SwitchCase])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "switchValue": "",
              "defaultBody": "",
              "comparison": "",
              "cases": ""
            },
            "return": ""
          },
          "Switch(System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System.Collections.Generic:IEnumerable[System.Linq.Expressions:SwitchCase])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "switchValue": "",
              "defaultBody": "",
              "comparison": "",
              "cases": ""
            },
            "return": ""
          },
          "Switch(System:Type, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Reflection:MethodInfo, System:Array[System.Linq.Expressions:SwitchCase])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "switchValue": "",
              "defaultBody": "",
              "comparison": "",
              "cases": ""
            },
            "return": ""
          },
          "SwitchCase(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "testValues": ""
            },
            "return": ""
          },
          "SwitchCase(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "testValues": ""
            },
            "return": ""
          },
          "SymbolDocument(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "fileName": ""
            },
            "return": ""
          },
          "SymbolDocument(System:String, System:Guid)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "fileName": "",
              "language": ""
            },
            "return": ""
          },
          "SymbolDocument(System:String, System:Guid, System:Guid)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "fileName": "",
              "language": "",
              "languageVendor": ""
            },
            "return": ""
          },
          "SymbolDocument(System:String, System:Guid, System:Guid, System:Guid)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "fileName": "",
              "language": "",
              "languageVendor": "",
              "documentType": ""
            },
            "return": ""
          },
          "Throw(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": ""
            },
            "return": ""
          },
          "Throw(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": "",
              "type": ""
            },
            "return": ""
          },
          "TryCatch(System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:CatchBlock])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "handlers": ""
            },
            "return": ""
          },
          "TryCatchFinally(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System:Array[System.Linq.Expressions:CatchBlock])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "_finally": "",
              "handlers": ""
            },
            "return": ""
          },
          "TryFault(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "fault": ""
            },
            "return": ""
          },
          "TryFinally(System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "_finally": ""
            },
            "return": ""
          },
          "TryGetActionType(System:Array[System:Type], System:*Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "typeArgs": "",
              "actionType": ""
            },
            "return": ""
          },
          "TryGetFuncType(System:Array[System:Type], System:*Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "typeArgs": "",
              "funcType": ""
            },
            "return": ""
          },
          "TypeAs(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": ""
            },
            "return": ""
          },
          "TypeEqual(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": ""
            },
            "return": ""
          },
          "TypeIs(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": ""
            },
            "return": ""
          },
          "UnaryPlus(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          },
          "UnaryPlus(System.Linq.Expressions:Expression, System.Reflection:MethodInfo)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "method": ""
            },
            "return": ""
          },
          "Unbox(System.Linq.Expressions:Expression, System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "type": ""
            },
            "return": ""
          },
          "Variable(System:Type)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": ""
            },
            "return": ""
          },
          "Variable(System:Type, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "type": "",
              "name": ""
            },
            "return": ""
          }
        },
        "Expression[$TDelegate]": {
          "doc": "",
          "doc_formatted": {},
          "CanReduce": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NodeType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Type": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Reduce()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReduceAndCheck()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "ReduceExtensions()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "parameters": ""
            },
            "return": ""
          }
        },
        "ExpressionStringBuilder": {
          "doc": "",
          "doc_formatted": {}
        },
        "ExpressionType": {
          "doc": "",
          "doc_formatted": {},
          "Add": {
            "doc": ""
          },
          "AddChecked": {
            "doc": ""
          },
          "And": {
            "doc": ""
          },
          "AndAlso": {
            "doc": ""
          },
          "ArrayLength": {
            "doc": ""
          },
          "ArrayIndex": {
            "doc": ""
          },
          "Call": {
            "doc": ""
          },
          "Coalesce": {
            "doc": ""
          },
          "Conditional": {
            "doc": ""
          },
          "Constant": {
            "doc": ""
          },
          "Convert": {
            "doc": ""
          },
          "ConvertChecked": {
            "doc": ""
          },
          "Divide": {
            "doc": ""
          },
          "Equal": {
            "doc": ""
          },
          "ExclusiveOr": {
            "doc": ""
          },
          "GreaterThan": {
            "doc": ""
          },
          "GreaterThanOrEqual": {
            "doc": ""
          },
          "Invoke": {
            "doc": ""
          },
          "Lambda": {
            "doc": ""
          },
          "LeftShift": {
            "doc": ""
          },
          "LessThan": {
            "doc": ""
          },
          "LessThanOrEqual": {
            "doc": ""
          },
          "ListInit": {
            "doc": ""
          },
          "MemberAccess": {
            "doc": ""
          },
          "MemberInit": {
            "doc": ""
          },
          "Modulo": {
            "doc": ""
          },
          "Multiply": {
            "doc": ""
          },
          "MultiplyChecked": {
            "doc": ""
          },
          "Negate": {
            "doc": ""
          },
          "UnaryPlus": {
            "doc": ""
          },
          "NegateChecked": {
            "doc": ""
          },
          "New": {
            "doc": ""
          },
          "NewArrayInit": {
            "doc": ""
          },
          "NewArrayBounds": {
            "doc": ""
          },
          "Not": {
            "doc": ""
          },
          "NotEqual": {
            "doc": ""
          },
          "Or": {
            "doc": ""
          },
          "OrElse": {
            "doc": ""
          },
          "Parameter": {
            "doc": ""
          },
          "Power": {
            "doc": ""
          },
          "Quote": {
            "doc": ""
          },
          "RightShift": {
            "doc": ""
          },
          "Subtract": {
            "doc": ""
          },
          "SubtractChecked": {
            "doc": ""
          },
          "TypeAs": {
            "doc": ""
          },
          "TypeIs": {
            "doc": ""
          },
          "Assign": {
            "doc": ""
          },
          "Block": {
            "doc": ""
          },
          "DebugInfo": {
            "doc": ""
          },
          "Decrement": {
            "doc": ""
          },
          "Dynamic": {
            "doc": ""
          },
          "Default": {
            "doc": ""
          },
          "Extension": {
            "doc": ""
          },
          "Goto": {
            "doc": ""
          },
          "Increment": {
            "doc": ""
          },
          "Index": {
            "doc": ""
          },
          "Label": {
            "doc": ""
          },
          "RuntimeVariables": {
            "doc": ""
          },
          "Loop": {
            "doc": ""
          },
          "Switch": {
            "doc": ""
          },
          "Throw": {
            "doc": ""
          },
          "Try": {
            "doc": ""
          },
          "Unbox": {
            "doc": ""
          },
          "AddAssign": {
            "doc": ""
          },
          "AndAssign": {
            "doc": ""
          },
          "DivideAssign": {
            "doc": ""
          },
          "ExclusiveOrAssign": {
            "doc": ""
          },
          "LeftShiftAssign": {
            "doc": ""
          },
          "ModuloAssign": {
            "doc": ""
          },
          "MultiplyAssign": {
            "doc": ""
          },
          "OrAssign": {
            "doc": ""
          },
          "PowerAssign": {
            "doc": ""
          },
          "RightShiftAssign": {
            "doc": ""
          },
          "SubtractAssign": {
            "doc": ""
          },
          "AddAssignChecked": {
            "doc": ""
          },
          "MultiplyAssignChecked": {
            "doc": ""
          },
          "SubtractAssignChecked": {
            "doc": ""
          },
          "PreIncrementAssign": {
            "doc": ""
          },
          "PreDecrementAssign": {
            "doc": ""
          },
          "PostIncrementAssign": {
            "doc": ""
          },
          "PostDecrementAssign": {
            "doc": ""
          },
          "TypeEqual": {
            "doc": ""
          },
          "OnesComplement": {
            "doc": ""
          },
          "IsTrue": {
            "doc": ""
          },
          "IsFalse": {
            "doc": ""
          }
        },
        "ExpressionVisitor": {
          "doc": "",
          "doc_formatted": {},
          "Visit(System.Collections.ObjectModel:ReadOnlyCollection[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "nodes": ""
            },
            "return": ""
          },
          "Visit(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "node": ""
            },
            "return": ""
          },
          "Visit(System.Collections.ObjectModel:ReadOnlyCollection[$T], System:Func[$T, $T])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "nodes": "",
              "elementVisitor": ""
            },
            "return": ""
          },
          "VisitAndConvert($T, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "node": "",
              "callerName": ""
            },
            "return": ""
          },
          "VisitAndConvert(System.Collections.ObjectModel:ReadOnlyCollection[$T], System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "nodes": "",
              "callerName": ""
            },
            "return": ""
          }
        },
        "FieldExpression": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Linq.Expressions:Expression, System.Reflection:FieldInfo)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "expression": "",
              "member": ""
            }
          }
        },
        "FullConditionalExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "FullConditionalExpressionWithType": {
          "doc": "",
          "doc_formatted": {}
        },
        "GotoExpression": {
          "doc": "",
          "doc_formatted": {},
          "Kind": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Target": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Value": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "value": ""
            },
            "return": ""
          }
        },
        "GotoExpressionKind": {
          "doc": "",
          "doc_formatted": {},
          "Goto": {
            "doc": ""
          },
          "Return": {
            "doc": ""
          },
          "Break": {
            "doc": ""
          },
          "Continue": {
            "doc": ""
          }
        },
        "IArgumentProvider": {
          "doc": "",
          "doc_formatted": {},
          "ArgumentCount": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetArgument(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "index": ""
            },
            "return": ""
          }
        },
        "IDynamicExpression": {
          "doc": "",
          "doc_formatted": {},
          "DelegateType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "CreateCallSite()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Rewrite(System:Array[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "args": ""
            },
            "return": ""
          }
        },
        "IndexExpression": {
          "doc": "",
          "doc_formatted": {},
          "Arguments": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Indexer": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Object": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "object": "",
              "arguments": ""
            },
            "return": ""
          }
        },
        "InstanceMethodCallExpression2": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "instance": "",
              "arg0": "",
              "arg1": ""
            }
          }
        },
        "InstanceMethodCallExpression3": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "instance": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            }
          }
        },
        "InstanceMethodCallExpressionN": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Collections.Generic:IList[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "instance": "",
              "args": ""
            }
          }
        },
        "InvocationExpression": {
          "doc": "",
          "doc_formatted": {},
          "Arguments": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Expression": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": "",
              "arguments": ""
            },
            "return": ""
          }
        },
        "LabelExpression": {
          "doc": "",
          "doc_formatted": {},
          "DefaultValue": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Target": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "target": "",
              "defaultValue": ""
            },
            "return": ""
          }
        },
        "LabelTarget": {
          "doc": "",
          "doc_formatted": {},
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Type": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "LambdaExpression": {
          "doc": "",
          "doc_formatted": {},
          "Body": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Parameters": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ReturnType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "TailCall": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Compile()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "Compile(System.Runtime.CompilerServices:DebugInfoGenerator)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "debugInfoGenerator": ""
            },
            "return": ""
          },
          "Compile(System:Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "preferInterpretation": ""
            },
            "return": ""
          },
          "CompileToMethod(System.Reflection.Emit:MethodBuilder)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": ""
            }
          },
          "CompileToMethod(System.Reflection.Emit:MethodBuilder, System.Runtime.CompilerServices:DebugInfoGenerator)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "method": "",
              "debugInfoGenerator": ""
            }
          }
        },
        "ListArgumentProvider": {
          "doc": "",
          "doc_formatted": {}
        },
        "ListInitExpression": {
          "doc": "",
          "doc_formatted": {},
          "Initializers": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NewExpression": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:NewExpression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "initializers": ""
            },
            "return": ""
          }
        },
        "LogicalBinaryExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "LoopExpression": {
          "doc": "",
          "doc_formatted": {},
          "Body": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "BreakLabel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "ContinueLabel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:LabelTarget, System.Linq.Expressions:LabelTarget, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "breakLabel": "",
              "continueLabel": "",
              "body": ""
            },
            "return": ""
          }
        },
        "MemberAssignment": {
          "doc": "",
          "doc_formatted": {},
          "Expression": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          }
        },
        "MemberBinding": {
          "doc": "",
          "doc_formatted": {},
          "BindingType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Member": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "MemberBindingType": {
          "doc": "",
          "doc_formatted": {},
          "Assignment": {
            "doc": ""
          },
          "MemberBinding": {
            "doc": ""
          },
          "ListBinding": {
            "doc": ""
          }
        },
        "MemberExpression": {
          "doc": "",
          "doc_formatted": {},
          "Expression": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Member": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          }
        },
        "MemberInitExpression": {
          "doc": "",
          "doc_formatted": {},
          "Bindings": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NewExpression": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:NewExpression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "newExpression": "",
              "bindings": ""
            },
            "return": ""
          }
        },
        "MemberListBinding": {
          "doc": "",
          "doc_formatted": {},
          "Initializers": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:ElementInit])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "initializers": ""
            },
            "return": ""
          }
        },
        "MemberMemberBinding": {
          "doc": "",
          "doc_formatted": {},
          "Bindings": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:MemberBinding])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "bindings": ""
            },
            "return": ""
          }
        },
        "MethodBinaryExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "MethodCallExpression": {
          "doc": "",
          "doc_formatted": {},
          "Arguments": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Method": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Object": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "object": "",
              "arguments": ""
            },
            "return": ""
          }
        },
        "MethodCallExpression1": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "arg0": ""
            }
          }
        },
        "MethodCallExpression2": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": ""
            }
          }
        },
        "MethodCallExpression3": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": ""
            }
          }
        },
        "MethodCallExpression4": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            }
          }
        },
        "MethodCallExpression5": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "arg0": "",
              "arg1": "",
              "arg2": "",
              "arg3": "",
              "arg4": ""
            }
          }
        },
        "MethodCallExpressionN": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Reflection:MethodInfo, System.Collections.Generic:IList[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "method": "",
              "args": ""
            }
          }
        },
        "NewArrayBoundsExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "NewArrayExpression": {
          "doc": "",
          "doc_formatted": {},
          "Expressions": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expressions": ""
            },
            "return": ""
          }
        },
        "NewArrayInitExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "NewExpression": {
          "doc": "",
          "doc_formatted": {},
          "Arguments": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Constructor": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Members": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "arguments": ""
            },
            "return": ""
          }
        },
        "NewValueTypeExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "OldExpressionVisitor": {
          "doc": "",
          "doc_formatted": {}
        },
        "OpAssignMethodConversionBinaryExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "ParameterExpression": {
          "doc": "",
          "doc_formatted": {},
          "IsByRef": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "PrimitiveParameterExpression[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "PropertyExpression": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System.Linq.Expressions:Expression, System.Reflection:PropertyInfo)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "expression": "",
              "member": ""
            }
          }
        },
        "ReadOnlyCollectionExtensions": {
          "doc": "",
          "doc_formatted": {}
        },
        "RuntimeVariablesExpression": {
          "doc": "",
          "doc_formatted": {},
          "Variables": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:ParameterExpression])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "variables": ""
            },
            "return": ""
          }
        },
        "SR": {
          "doc": "",
          "doc_formatted": {},
          "Resources": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "GetObject(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": ""
            },
            "return": ""
          },
          "GetString(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": ""
            },
            "return": ""
          },
          "GetString(System:String, System:*Boolean)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": "",
              "usedFallback": ""
            },
            "return": ""
          },
          "GetString(System:String, System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "name": "",
              "args": ""
            },
            "return": ""
          }
        },
        "SRCategoryAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "category": ""
            }
          }
        },
        "SRDescriptionAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "description": ""
            }
          }
        },
        "Scope1": {
          "doc": "",
          "doc_formatted": {}
        },
        "ScopeExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "ScopeN": {
          "doc": "",
          "doc_formatted": {}
        },
        "ScopeWithType": {
          "doc": "",
          "doc_formatted": {}
        },
        "Set[$T]": {
          "doc": "",
          "doc_formatted": {}
        },
        "SimpleBinaryExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "SpanDebugInfoExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "StackGuard": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "RunOnEmptyStack(System:Action[$T1, $T2], $T1, $T2)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "action": "",
              "arg1": "",
              "arg2": ""
            }
          },
          "RunOnEmptyStack(System:Func[$T1, $T2, $R], $T1, $T2)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "action": "",
              "arg1": "",
              "arg2": ""
            },
            "return": ""
          },
          "RunOnEmptyStack(System:Action[$T1, $T2, $T3], $T1, $T2, $T3)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "action": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            }
          },
          "RunOnEmptyStack(System:Func[$T1, $T2, $T3, $R], $T1, $T2, $T3)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "action": "",
              "arg1": "",
              "arg2": "",
              "arg3": ""
            },
            "return": ""
          },
          "TryEnterOnCurrentStack()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          }
        },
        "Strings": {
          "doc": "",
          "doc_formatted": {}
        },
        "SwitchCase": {
          "doc": "",
          "doc_formatted": {},
          "Body": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "TestValues": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Collections.Generic:IEnumerable[System.Linq.Expressions:Expression], System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "testValues": "",
              "body": ""
            },
            "return": ""
          }
        },
        "SwitchExpression": {
          "doc": "",
          "doc_formatted": {},
          "Cases": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Comparison": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "DefaultBody": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SwitchValue": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:SwitchCase], System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "switchValue": "",
              "cases": "",
              "defaultBody": ""
            },
            "return": ""
          }
        },
        "SymbolDocumentInfo": {
          "doc": "",
          "doc_formatted": {},
          "DocumentType": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "FileName": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Language": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "LanguageVendor": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "SymbolDocumentWithGuids": {
          "doc": "",
          "doc_formatted": {}
        },
        "TryExpression": {
          "doc": "",
          "doc_formatted": {},
          "Body": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Fault": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Finally": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Handlers": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression, System.Collections.Generic:IEnumerable[System.Linq.Expressions:CatchBlock], System.Linq.Expressions:Expression, System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "body": "",
              "handlers": "",
              "_finally": "",
              "fault": ""
            },
            "return": ""
          }
        },
        "TypeBinaryExpression": {
          "doc": "",
          "doc_formatted": {},
          "Expression": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "TypeOperand": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "expression": ""
            },
            "return": ""
          }
        },
        "TypedConstantExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypedDynamicExpression1": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypedDynamicExpression2": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypedDynamicExpression3": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypedDynamicExpression4": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypedDynamicExpressionN": {
          "doc": "",
          "doc_formatted": {}
        },
        "TypedParameterExpression": {
          "doc": "",
          "doc_formatted": {}
        },
        "UnaryExpression": {
          "doc": "",
          "doc_formatted": {},
          "IsLifted": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IsLiftedToNull": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Method": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Operand": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Update(System.Linq.Expressions:Expression)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "operand": ""
            },
            "return": ""
          }
        },
        "Compiler": {
          "doc": "",
          "AnalyzedTree": {
            "doc": "",
            "doc_formatted": {}
          },
          "AssemblyGen": {
            "doc": "",
            "doc_formatted": {}
          },
          "BoundConstants": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            }
          },
          "CompilerScope": {
            "doc": "",
            "doc_formatted": {}
          },
          "DelegateHelpers": {
            "doc": "",
            "doc_formatted": {}
          },
          "HoistedLocals": {
            "doc": "",
            "doc_formatted": {}
          },
          "ILGen": {
            "doc": "",
            "doc_formatted": {}
          },
          "KeyedQueue[$K, $V]": {
            "doc": "",
            "doc_formatted": {}
          },
          "LabelInfo": {
            "doc": "",
            "doc_formatted": {}
          },
          "LabelScopeInfo": {
            "doc": "",
            "doc_formatted": {}
          },
          "LabelScopeKind": {
            "doc": "",
            "doc_formatted": {},
            "Statement": {
              "doc": ""
            },
            "Block": {
              "doc": ""
            },
            "Switch": {
              "doc": ""
            },
            "Lambda": {
              "doc": ""
            },
            "Try": {
              "doc": ""
            },
            "Catch": {
              "doc": ""
            },
            "Finally": {
              "doc": ""
            },
            "Filter": {
              "doc": ""
            },
            "Expression": {
              "doc": ""
            }
          },
          "LambdaCompiler": {
            "doc": "",
            "doc_formatted": {}
          },
          "SpilledExpressionBlock": {
            "doc": "",
            "doc_formatted": {}
          },
          "StackSpiller": {
            "doc": "",
            "doc_formatted": {}
          },
          "SymbolGuids": {
            "doc": "",
            "doc_formatted": {}
          },
          "VariableBinder": {
            "doc": "",
            "doc_formatted": {}
          },
          "VariableStorageKind": {
            "doc": "",
            "doc_formatted": {},
            "Local": {
              "doc": ""
            },
            "Hoisted": {
              "doc": ""
            }
          }
        }
      }
    },
    "Management": {
      "doc": "",
      "Instrumentation": {
        "doc": "",
        "InstanceNotFoundException": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "message": ""
            }
          },
          "__init__(System:String, System:Exception)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "message": "",
              "innerException": ""
            }
          }
        },
        "InstrumentationBaseException": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "message": ""
            }
          },
          "__init__(System:String, System:Exception)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "message": "",
              "innerException": ""
            }
          }
        },
        "InstrumentationException": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "__init__(System:Exception)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "innerException": ""
            }
          },
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "message": ""
            }
          },
          "__init__(System:String, System:Exception)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "message": "",
              "innerException": ""
            }
          }
        },
        "ManagementBindAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Schema": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementCommitAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "ManagementConfigurationAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Mode": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Schema": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementConfigurationType": {
          "doc": "",
          "doc_formatted": {},
          "Apply": {
            "doc": ""
          },
          "OnCommit": {
            "doc": ""
          }
        },
        "ManagementCreateAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "ManagementEntityAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "External": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Singleton": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementEnumeratorAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Schema": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementHostingModel": {
          "doc": "",
          "doc_formatted": {},
          "Decoupled": {
            "doc": ""
          },
          "NetworkService": {
            "doc": ""
          },
          "LocalService": {
            "doc": ""
          },
          "LocalSystem": {
            "doc": ""
          }
        },
        "ManagementKeyAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          }
        },
        "ManagementMemberAttribute": {
          "doc": "",
          "doc_formatted": {},
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementNameAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "name": ""
            }
          },
          "Name": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementNewInstanceAttribute": {
          "doc": "",
          "doc_formatted": {}
        },
        "ManagementProbeAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Schema": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementReferenceAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Type": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementRemoveAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Schema": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "ManagementTaskAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__()": {
            "doc": "",
            "doc_formatted": {}
          },
          "Schema": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "WmiConfigurationAttribute": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "scope": ""
            }
          },
          "HostingGroup": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "HostingModel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "IdentifyLevel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "NamespaceSecurity": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Scope": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "SecurityRestriction": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        }
      }
    },
    "Diagnostics": {
      "doc": "",
      "EventSchemaTraceListener": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System:String)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "fileName": ""
          }
        },
        "__init__(System:String, System:String)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "fileName": "",
            "name": ""
          }
        },
        "__init__(System:String, System:String, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "fileName": "",
            "name": "",
            "bufferSize": ""
          }
        },
        "__init__(System:String, System:String, System:Int32, System.Diagnostics:TraceLogRetentionOption)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "fileName": "",
            "name": "",
            "bufferSize": "",
            "logRetentionOption": ""
          }
        },
        "__init__(System:String, System:String, System:Int32, System.Diagnostics:TraceLogRetentionOption, System:Int64)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "fileName": "",
            "name": "",
            "bufferSize": "",
            "logRetentionOption": "",
            "maximumFileSize": ""
          }
        },
        "__init__(System:String, System:String, System:Int32, System.Diagnostics:TraceLogRetentionOption, System:Int64, System:Int32)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "fileName": "",
            "name": "",
            "bufferSize": "",
            "logRetentionOption": "",
            "maximumFileSize": "",
            "maximumNumberOfFiles": ""
          }
        },
        "BufferSize": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "MaximumFileSize": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "MaximumNumberOfFiles": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        },
        "TraceLogRetentionOption": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "StackTraceSymbols": {
        "doc": "",
        "doc_formatted": {},
        "__init__()": {
          "doc": "",
          "doc_formatted": {}
        },
        "GetSourceLineInfo(System:String, System:IntPtr, System:Int32, System:IntPtr, System:Int32, System:Int32, System:Int32, System:*String, System:*Int32, System:*Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "assemblyPath": "",
            "loadedPeAddress": "",
            "loadedPeSize": "",
            "inMemoryPdbAddress": "",
            "inMemoryPdbSize": "",
            "methodToken": "",
            "ilOffset": "",
            "sourceFile": "",
            "sourceLine": "",
            "sourceColumn": ""
          }
        },
        "GetSourceLineInfoWithoutCasAssert(System:String, System:IntPtr, System:Int32, System:IntPtr, System:Int32, System:Int32, System:Int32, System:*String, System:*Int32, System:*Int32)": {
          "doc": "",
          "doc_formatted": {},
          "exceptions": {},
          "parameters": {
            "assemblyPath": "",
            "loadedPeAddress": "",
            "loadedPeSize": "",
            "inMemoryPdbAddress": "",
            "inMemoryPdbSize": "",
            "methodToken": "",
            "ilOffset": "",
            "sourceFile": "",
            "sourceLine": "",
            "sourceColumn": ""
          }
        }
      },
      "TraceLogRetentionOption": {
        "doc": "",
        "doc_formatted": {},
        "UnlimitedSequentialFiles": {
          "doc": ""
        },
        "LimitedCircularFiles": {
          "doc": ""
        },
        "SingleFileUnboundedSize": {
          "doc": ""
        },
        "LimitedSequentialFiles": {
          "doc": ""
        },
        "SingleFileBoundedSize": {
          "doc": ""
        }
      },
      "UnescapedXmlDiagnosticData": {
        "doc": "",
        "doc_formatted": {},
        "__init__(System:String)": {
          "doc": "",
          "doc_formatted": {},
          "parameters": {
            "xmlPayload": ""
          }
        },
        "UnescapedXml": {
          "doc": "",
          "doc_formatted": {},
          "return": ""
        }
      },
      "PerformanceData": {
        "doc": "",
        "CounterData": {
          "doc": "",
          "doc_formatted": {},
          "RawValue": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Value": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Decrement()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "Increment()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "IncrementBy(System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "value": ""
            }
          }
        },
        "CounterSet": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Guid, System:Guid, System.Diagnostics.PerformanceData:CounterSetInstanceType)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "providerGuid": "",
              "counterSetGuid": "",
              "instanceType": ""
            }
          },
          "AddCounter(System:Int32, System.Diagnostics.PerformanceData:CounterType)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "counterId": "",
              "counterType": ""
            }
          },
          "AddCounter(System:Int32, System.Diagnostics.PerformanceData:CounterType, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "counterId": "",
              "counterType": "",
              "counterName": ""
            }
          },
          "CreateCounterSetInstance(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "instanceName": ""
            },
            "return": ""
          }
        },
        "CounterSetInstance": {
          "doc": "",
          "doc_formatted": {},
          "Counters": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "CounterSetInstanceCounterDataSet": {
          "doc": "",
          "doc_formatted": {},
          "Item": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "__getitem__(System:Int32)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "counterId": ""
            },
            "return": ""
          },
          "__getitem__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "counterName": ""
            },
            "return": ""
          }
        },
        "CounterSetInstanceType": {
          "doc": "",
          "doc_formatted": {},
          "Single": {
            "doc": ""
          },
          "Multiple": {
            "doc": ""
          },
          "GlobalAggregate": {
            "doc": ""
          },
          "MultipleAggregate": {
            "doc": ""
          },
          "GlobalAggregateWithHistory": {
            "doc": ""
          },
          "InstanceAggregate": {
            "doc": ""
          }
        },
        "CounterType": {
          "doc": "",
          "doc_formatted": {},
          "RawDataHex32": {
            "doc": ""
          },
          "RawDataHex64": {
            "doc": ""
          },
          "RawData32": {
            "doc": ""
          },
          "RawData64": {
            "doc": ""
          },
          "Delta32": {
            "doc": ""
          },
          "Delta64": {
            "doc": ""
          },
          "SampleCounter": {
            "doc": ""
          },
          "QueueLength": {
            "doc": ""
          },
          "LargeQueueLength": {
            "doc": ""
          },
          "QueueLength100Ns": {
            "doc": ""
          },
          "QueueLengthObjectTime": {
            "doc": ""
          },
          "RateOfCountPerSecond32": {
            "doc": ""
          },
          "RateOfCountPerSecond64": {
            "doc": ""
          },
          "RawFraction32": {
            "doc": ""
          },
          "RawFraction64": {
            "doc": ""
          },
          "PercentageActive": {
            "doc": ""
          },
          "PrecisionSystemTimer": {
            "doc": ""
          },
          "PercentageActive100Ns": {
            "doc": ""
          },
          "PrecisionTimer100Ns": {
            "doc": ""
          },
          "ObjectSpecificTimer": {
            "doc": ""
          },
          "PrecisionObjectSpecificTimer": {
            "doc": ""
          },
          "SampleFraction": {
            "doc": ""
          },
          "PercentageNotActive": {
            "doc": ""
          },
          "PercentageNotActive100Ns": {
            "doc": ""
          },
          "MultiTimerPercentageActive": {
            "doc": ""
          },
          "MultiTimerPercentageActive100Ns": {
            "doc": ""
          },
          "MultiTimerPercentageNotActive": {
            "doc": ""
          },
          "MultiTimerPercentageNotActive100Ns": {
            "doc": ""
          },
          "AverageTimer32": {
            "doc": ""
          },
          "ElapsedTime": {
            "doc": ""
          },
          "AverageCount64": {
            "doc": ""
          },
          "SampleBase": {
            "doc": ""
          },
          "AverageBase": {
            "doc": ""
          },
          "RawBase32": {
            "doc": ""
          },
          "RawBase64": {
            "doc": ""
          },
          "MultiTimerBase": {
            "doc": ""
          }
        },
        "PerfProvider": {
          "doc": "",
          "doc_formatted": {}
        },
        "PerfProviderCollection": {
          "doc": "",
          "doc_formatted": {}
        }
      },
      "Eventing": {
        "doc": "",
        "EventDescriptor": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Int32, System:Byte, System:Byte, System:Byte, System:Byte, System:Int32, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "id": "",
              "version": "",
              "channel": "",
              "level": "",
              "opcode": "",
              "task": "",
              "keywords": ""
            }
          },
          "Channel": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "EventId": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Keywords": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Level": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Opcode": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Task": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          },
          "Version": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "EventProvider": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:Guid)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "providerGuid": ""
            }
          },
          "Close()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {}
          },
          "CreateActivityId()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "GetLastWriteEventError()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "IsEnabled()": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "return": ""
          },
          "IsEnabled(System:Byte, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "level": "",
              "keywords": ""
            },
            "return": ""
          },
          "SetActivityId(System:*Guid)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "id": ""
            }
          },
          "WriteEvent(System.Diagnostics.Eventing:*EventDescriptor, System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "eventDescriptor": "",
              "eventPayload": ""
            },
            "return": ""
          },
          "WriteEvent(System.Diagnostics.Eventing:*EventDescriptor, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "eventDescriptor": "",
              "data": ""
            },
            "return": ""
          },
          "WriteMessageEvent(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "eventMessage": ""
            },
            "return": ""
          },
          "WriteMessageEvent(System:String, System:Byte, System:Int64)": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "eventMessage": "",
              "eventLevel": "",
              "eventKeywords": ""
            },
            "return": ""
          },
          "WriteTransferEvent(System.Diagnostics.Eventing:*EventDescriptor, System:Guid, System:Array[System:Object])": {
            "doc": "",
            "doc_formatted": {},
            "exceptions": {},
            "parameters": {
              "eventDescriptor": "",
              "relatedActivityId": "",
              "eventPayload": ""
            },
            "return": ""
          },
          "WriteEventErrorCode": {
            "doc": "",
            "doc_formatted": {},
            "NoError": {
              "doc": ""
            },
            "NoFreeBuffers": {
              "doc": ""
            },
            "EventTooBig": {
              "doc": ""
            }
          }
        },
        "EventProviderTraceListener": {
          "doc": "",
          "doc_formatted": {},
          "__init__(System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "providerId": ""
            }
          },
          "__init__(System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "providerId": "",
              "name": ""
            }
          },
          "__init__(System:String, System:String, System:String)": {
            "doc": "",
            "doc_formatted": {},
            "parameters": {
              "providerId": "",
              "name": "",
              "delimiter": ""
            }
          },
          "Delimiter": {
            "doc": "",
            "doc_formatted": {},
            "return": ""
          }
        },
        "Reader": {
          "doc": "",
          "CoTaskMemSafeHandle": {
            "doc": "",
            "doc_formatted": {},
            "Zero": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "CoTaskMemUnicodeSafeHandle": {
            "doc": "",
            "doc_formatted": {},
            "Zero": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventBookmark": {
            "doc": "",
            "doc_formatted": {}
          },
          "EventKeyword": {
            "doc": "",
            "doc_formatted": {},
            "DisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Name": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Value": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLevel": {
            "doc": "",
            "doc_formatted": {},
            "DisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Name": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Value": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLogConfiguration": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "logName": ""
              }
            },
            "__init__(System:String, System.Diagnostics.Eventing.Reader:EventLogSession)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "logName": "",
                "session": ""
              }
            },
            "IsClassicLog": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "IsEnabled": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogFilePath": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogIsolation": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogMode": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogType": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "MaximumSizeInBytes": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "OwningProviderName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderBufferSize": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderControlGuid": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderKeywords": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderLatency": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderLevel": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderMaximumNumberOfBuffers": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderMinimumNumberOfBuffers": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderNames": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SecurityDescriptor": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "SaveChanges()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {}
            }
          },
          "EventLogException": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": ""
              }
            },
            "__init__(System:String, System:Exception)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": "",
                "innerException": ""
              }
            }
          },
          "EventLogHandle": {
            "doc": "",
            "doc_formatted": {},
            "Zero": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLogInformation": {
            "doc": "",
            "doc_formatted": {},
            "Attributes": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CreationTime": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "FileSize": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "IsLogFull": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LastAccessTime": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LastWriteTime": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "OldestRecordNumber": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RecordCount": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLogInvalidDataException": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": ""
              }
            },
            "__init__(System:String, System:Exception)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": "",
                "innerException": ""
              }
            }
          },
          "EventLogIsolation": {
            "doc": "",
            "doc_formatted": {},
            "Application": {
              "doc": ""
            },
            "System": {
              "doc": ""
            },
            "Custom": {
              "doc": ""
            }
          },
          "EventLogLink": {
            "doc": "",
            "doc_formatted": {},
            "DisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "IsImported": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLogMode": {
            "doc": "",
            "doc_formatted": {},
            "Circular": {
              "doc": ""
            },
            "AutoBackup": {
              "doc": ""
            },
            "Retain": {
              "doc": ""
            }
          },
          "EventLogNotFoundException": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": ""
              }
            },
            "__init__(System:String, System:Exception)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": "",
                "innerException": ""
              }
            }
          },
          "EventLogPermissionHolder": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "GetEventLogPermission()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            }
          },
          "EventLogPropertySelector": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System.Collections.Generic:IEnumerable[System:String])": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "propertyQueries": ""
              }
            }
          },
          "EventLogProviderDisabledException": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": ""
              }
            },
            "__init__(System:String, System:Exception)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": "",
                "innerException": ""
              }
            }
          },
          "EventLogQuery": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System:String, System.Diagnostics.Eventing.Reader:PathType)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "path": "",
                "pathType": ""
              }
            },
            "__init__(System:String, System.Diagnostics.Eventing.Reader:PathType, System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "path": "",
                "pathType": "",
                "query": ""
              }
            },
            "ReverseDirection": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Session": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "TolerateQueryErrors": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLogReader": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System.Diagnostics.Eventing.Reader:EventLogQuery)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "eventQuery": ""
              }
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "path": ""
              }
            },
            "__init__(System.Diagnostics.Eventing.Reader:EventLogQuery, System.Diagnostics.Eventing.Reader:EventBookmark)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "eventQuery": "",
                "bookmark": ""
              }
            },
            "__init__(System:String, System.Diagnostics.Eventing.Reader:PathType)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "path": "",
                "pathType": ""
              }
            },
            "BatchSize": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogStatus": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CancelReading()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {}
            },
            "ReadEvent()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            },
            "ReadEvent(System:TimeSpan)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "timeout": ""
              },
              "return": ""
            },
            "Seek(System.Diagnostics.Eventing.Reader:EventBookmark)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "bookmark": ""
              }
            },
            "Seek(System.Diagnostics.Eventing.Reader:EventBookmark, System:Int64)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "bookmark": "",
                "offset": ""
              }
            },
            "Seek(System.IO:SeekOrigin, System:Int64)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "origin": "",
                "offset": ""
              }
            }
          },
          "EventLogReadingException": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": ""
              }
            },
            "__init__(System:String, System:Exception)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "message": "",
                "innerException": ""
              }
            }
          },
          "EventLogRecord": {
            "doc": "",
            "doc_formatted": {},
            "ContainerLog": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "MatchedQueryIds": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "GetPropertyValues(System.Diagnostics.Eventing.Reader:EventLogPropertySelector)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "propertySelector": ""
              },
              "return": ""
            }
          },
          "EventLogSession": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "server": ""
              }
            },
            "__init__(System:String, System:String, System:String, System.Security:SecureString, System.Diagnostics.Eventing.Reader:SessionAuthentication)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "server": "",
                "domain": "",
                "user": "",
                "password": "",
                "logOnType": ""
              }
            },
            "GlobalSession": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "CancelCurrentOperations()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {}
            },
            "ClearLog(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "logName": ""
              }
            },
            "ClearLog(System:String, System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "logName": "",
                "backupPath": ""
              }
            },
            "ExportLog(System:String, System.Diagnostics.Eventing.Reader:PathType, System:String, System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "path": "",
                "pathType": "",
                "query": "",
                "targetFilePath": ""
              }
            },
            "ExportLog(System:String, System.Diagnostics.Eventing.Reader:PathType, System:String, System:String, System:Boolean)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "path": "",
                "pathType": "",
                "query": "",
                "targetFilePath": "",
                "tolerateQueryErrors": ""
              }
            },
            "ExportLogAndMessages(System:String, System.Diagnostics.Eventing.Reader:PathType, System:String, System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "path": "",
                "pathType": "",
                "query": "",
                "targetFilePath": ""
              }
            },
            "ExportLogAndMessages(System:String, System.Diagnostics.Eventing.Reader:PathType, System:String, System:String, System:Boolean, System.Globalization:CultureInfo)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "path": "",
                "pathType": "",
                "query": "",
                "targetFilePath": "",
                "tolerateQueryErrors": "",
                "targetCultureInfo": ""
              }
            },
            "GetLogInformation(System:String, System.Diagnostics.Eventing.Reader:PathType)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "logName": "",
                "pathType": ""
              },
              "return": ""
            },
            "GetLogNames()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            },
            "GetProviderNames()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            }
          },
          "EventLogStatus": {
            "doc": "",
            "doc_formatted": {},
            "LogName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "StatusCode": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventLogType": {
            "doc": "",
            "doc_formatted": {},
            "Administrative": {
              "doc": ""
            },
            "Operational": {
              "doc": ""
            },
            "Analytical": {
              "doc": ""
            },
            "Debug": {
              "doc": ""
            }
          },
          "EventLogWatcher": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System.Diagnostics.Eventing.Reader:EventLogQuery)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "eventQuery": ""
              }
            },
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "path": ""
              }
            },
            "__init__(System.Diagnostics.Eventing.Reader:EventLogQuery, System.Diagnostics.Eventing.Reader:EventBookmark)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "eventQuery": "",
                "bookmark": ""
              }
            },
            "__init__(System.Diagnostics.Eventing.Reader:EventLogQuery, System.Diagnostics.Eventing.Reader:EventBookmark, System:Boolean)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "eventQuery": "",
                "bookmark": "",
                "readExistingEvents": ""
              }
            },
            "Enabled": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EventRecordWritten": {
              "doc": "",
              "doc_formatted": {}
            }
          },
          "EventMetadata": {
            "doc": "",
            "doc_formatted": {},
            "Description": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Id": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Keywords": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Level": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogLink": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Opcode": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Task": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Template": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Version": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventOpcode": {
            "doc": "",
            "doc_formatted": {},
            "DisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Name": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Value": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventProperty": {
            "doc": "",
            "doc_formatted": {},
            "Value": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventRecord": {
            "doc": "",
            "doc_formatted": {},
            "ActivityId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Bookmark": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Id": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Keywords": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "KeywordsDisplayNames": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Level": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LevelDisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "MachineName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Opcode": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "OpcodeDisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProcessId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Properties": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ProviderName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Qualifiers": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RecordId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "RelatedActivityId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Task": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "TaskDisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ThreadId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "TimeCreated": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "UserId": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Version": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "FormatDescription()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            },
            "FormatDescription(System.Collections.Generic:IEnumerable[System:Object])": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "values": ""
              },
              "return": ""
            },
            "ToXml()": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "return": ""
            }
          },
          "EventRecordWrittenEventArgs": {
            "doc": "",
            "doc_formatted": {},
            "EventException": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EventRecord": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "EventTask": {
            "doc": "",
            "doc_formatted": {},
            "DisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "EventGuid": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Name": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Value": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "NativeWrapper": {
            "doc": "",
            "doc_formatted": {},
            "__init__()": {
              "doc": "",
              "doc_formatted": {}
            },
            "ConvertToAnsiString(Microsoft.Win32:UnsafeNativeMethods.EvtVariant)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": ""
              },
              "return": ""
            },
            "ConvertToArray(Microsoft.Win32:UnsafeNativeMethods.EvtVariant, System:Type, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": "",
                "objType": "",
                "size": ""
              },
              "return": ""
            },
            "ConvertToBoolArray(Microsoft.Win32:UnsafeNativeMethods.EvtVariant)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": ""
              },
              "return": ""
            },
            "ConvertToFileTimeArray(Microsoft.Win32:UnsafeNativeMethods.EvtVariant)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": ""
              },
              "return": ""
            },
            "ConvertToObject(Microsoft.Win32:UnsafeNativeMethods.EvtVariant, Microsoft.Win32:UnsafeNativeMethods.EvtVariantType)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": "",
                "desiredType": ""
              },
              "return": ""
            },
            "ConvertToSafeHandle(Microsoft.Win32:UnsafeNativeMethods.EvtVariant)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": ""
              },
              "return": ""
            },
            "ConvertToString(Microsoft.Win32:UnsafeNativeMethods.EvtVariant)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": ""
              },
              "return": ""
            },
            "ConvertToStringArray(Microsoft.Win32:UnsafeNativeMethods.EvtVariant, System:Boolean)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": "",
                "ansi": ""
              },
              "return": ""
            },
            "ConvertToSysTimeArray(Microsoft.Win32:UnsafeNativeMethods.EvtVariant)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "val": ""
              },
              "return": ""
            },
            "EvtArchiveExportedLog(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System:Int32, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "logFilePath": "",
                "locale": "",
                "flags": ""
              }
            },
            "EvtCancel(System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": ""
              }
            },
            "EvtClearLog(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System:String, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "channelPath": "",
                "targetFilePath": "",
                "flags": ""
              }
            },
            "EvtClose(System:IntPtr)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": ""
              }
            },
            "EvtCreateBookmark(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "bookmarkXml": ""
              },
              "return": ""
            },
            "EvtCreateRenderContext(System:Int32, System:Array[System:String], Microsoft.Win32:UnsafeNativeMethods.EvtRenderContextFlags)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "valuePathsCount": "",
                "valuePaths": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtExportLog(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System:String, System:String, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "channelPath": "",
                "query": "",
                "targetFilePath": "",
                "flags": ""
              }
            },
            "EvtFormatMessage(System.Diagnostics.Eventing.Reader:EventLogHandle, System:UInt32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "msgId": ""
              },
              "return": ""
            },
            "EvtFormatMessageFormatDescription(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle, System:Array[System:String])": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "eventHandle": "",
                "values": ""
              },
              "return": ""
            },
            "EvtFormatMessageRenderKeywords(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtFormatMessageFlags)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "pmHandle": "",
                "eventHandle": "",
                "flag": ""
              },
              "return": ""
            },
            "EvtFormatMessageRenderName(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtFormatMessageFlags)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "pmHandle": "",
                "eventHandle": "",
                "flag": ""
              },
              "return": ""
            },
            "EvtGetChannelConfigProperty(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtChannelConfigPropertyId)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "enumType": ""
              },
              "return": ""
            },
            "EvtGetEventInfo(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtEventPropertyId)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "enumType": ""
              },
              "return": ""
            },
            "EvtGetEventMetadataProperty(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtEventMetadataPropertyId)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "enumType": ""
              },
              "return": ""
            },
            "EvtGetLogInfo(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtLogPropertyId)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "enumType": ""
              },
              "return": ""
            },
            "EvtGetObjectArrayProperty(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "objArrayHandle": "",
                "index": "",
                "thePropertyId": ""
              },
              "return": ""
            },
            "EvtGetObjectArraySize(System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "objectArray": ""
              },
              "return": ""
            },
            "EvtGetPublisherMetadataProperty(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtPublisherMetadataPropertyId)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "pmHandle": "",
                "thePropertyId": ""
              },
              "return": ""
            },
            "EvtGetQueryInfo(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtQueryPropertyId)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "enumType": ""
              },
              "return": ""
            },
            "EvtNext(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32, System:Array[System:IntPtr], System:Int32, System:Int32, System:*Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "queryHandle": "",
                "eventSize": "",
                "events": "",
                "timeout": "",
                "flags": "",
                "returned": ""
              },
              "return": ""
            },
            "EvtNextChannelPath(System.Diagnostics.Eventing.Reader:EventLogHandle, System:*Boolean)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "finish": ""
              },
              "return": ""
            },
            "EvtNextEventMetadata(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "eventMetadataEnum": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtNextPublisherId(System.Diagnostics.Eventing.Reader:EventLogHandle, System:*Boolean)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "finish": ""
              },
              "return": ""
            },
            "EvtOpenChannelConfig(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "channelPath": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtOpenChannelEnum(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtOpenEventMetadataEnum(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderMetadata": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtOpenLog(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System.Diagnostics.Eventing.Reader:PathType)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "path": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtOpenProviderEnum(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtOpenProviderMetadata(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System:String, System:Int32, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "ProviderId": "",
                "logFilePath": "",
                "locale": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtOpenSession(Microsoft.Win32:UnsafeNativeMethods.EvtLoginClass, Microsoft.Win32:*EvtRpcLogin, System:Int32, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "loginClass": "",
                "login": "",
                "timeout": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtQuery(System.Diagnostics.Eventing.Reader:EventLogHandle, System:String, System:String, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "path": "",
                "query": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtRender(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtRenderFlags, System.Text:StringBuilder)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "context": "",
                "eventHandle": "",
                "flags": "",
                "buffer": ""
              }
            },
            "EvtRenderBookmark(System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "eventHandle": ""
              },
              "return": ""
            },
            "EvtRenderBufferWithContextSystem(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtRenderFlags, System.Diagnostics.Eventing.Reader:NativeWrapper.SystemProperties, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "contextHandle": "",
                "eventHandle": "",
                "flag": "",
                "systemProperties": "",
                "SYSTEM_PROPERTY_COUNT": ""
              }
            },
            "EvtRenderBufferWithContextUserOrValues(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "contextHandle": "",
                "eventHandle": ""
              },
              "return": ""
            },
            "EvtSaveChannelConfig(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "channelConfig": "",
                "flags": ""
              }
            },
            "EvtSeek(System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int64, System.Diagnostics.Eventing.Reader:EventLogHandle, System:Int32, Microsoft.Win32:UnsafeNativeMethods.EvtSeekFlags)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "resultSet": "",
                "position": "",
                "bookmark": "",
                "timeout": "",
                "flags": ""
              }
            },
            "EvtSetChannelConfigProperty(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32:UnsafeNativeMethods.EvtChannelConfigPropertyId, System:Object)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "handle": "",
                "enumType": "",
                "val": ""
              }
            },
            "EvtSubscribe(System.Diagnostics.Eventing.Reader:EventLogHandle, Microsoft.Win32.SafeHandles:SafeWaitHandle, System:String, System:String, System.Diagnostics.Eventing.Reader:EventLogHandle, System:IntPtr, System:IntPtr, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "session": "",
                "signalEvent": "",
                "path": "",
                "query": "",
                "bookmark": "",
                "context": "",
                "callback": "",
                "flags": ""
              },
              "return": ""
            },
            "EvtUpdateBookmark(System.Diagnostics.Eventing.Reader:EventLogHandle, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "bookmark": "",
                "eventHandle": ""
              }
            },
            "SystemProperties": {
              "doc": "",
              "doc_formatted": {}
            }
          },
          "PathType": {
            "doc": "",
            "doc_formatted": {},
            "LogName": {
              "doc": ""
            },
            "FilePath": {
              "doc": ""
            }
          },
          "ProviderMetadata": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System:String)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "providerName": ""
              }
            },
            "__init__(System:String, System.Diagnostics.Eventing.Reader:EventLogSession, System.Globalization:CultureInfo)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "providerName": "",
                "session": "",
                "targetCultureInfo": ""
              }
            },
            "DisplayName": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Events": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "HelpLink": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Id": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Keywords": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Levels": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "LogLinks": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "MessageFilePath": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Name": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Opcodes": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ParameterFilePath": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "ResourceFilePath": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            },
            "Tasks": {
              "doc": "",
              "doc_formatted": {},
              "return": ""
            }
          },
          "ProviderMetadataCachedInformation": {
            "doc": "",
            "doc_formatted": {},
            "__init__(System.Diagnostics.Eventing.Reader:EventLogSession, System:String, System:Int32)": {
              "doc": "",
              "doc_formatted": {},
              "parameters": {
                "session": "",
                "logfile": "",
                "maximumCacheSize": ""
              }
            },
            "GetFormatDescription(System:String, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderName": "",
                "eventHandle": ""
              },
              "return": ""
            },
            "GetFormatDescription(System:String, System.Diagnostics.Eventing.Reader:EventLogHandle, System:Array[System:String])": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderName": "",
                "eventHandle": "",
                "values": ""
              },
              "return": ""
            },
            "GetKeywordDisplayNames(System:String, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderName": "",
                "eventHandle": ""
              },
              "return": ""
            },
            "GetLevelDisplayName(System:String, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderName": "",
                "eventHandle": ""
              },
              "return": ""
            },
            "GetOpcodeDisplayName(System:String, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderName": "",
                "eventHandle": ""
              },
              "return": ""
            },
            "GetTaskDisplayName(System:String, System.Diagnostics.Eventing.Reader:EventLogHandle)": {
              "doc": "",
              "doc_formatted": {},
              "exceptions": {},
              "parameters": {
                "ProviderName": "",
                "eventHandle": ""
              },
              "return": ""
            }
          },
          "SessionAuthentication": {
            "doc": "",
            "doc_formatted": {},
            "Default": {
              "doc": ""
            },
            "Negotiate": {
              "doc": ""
            },
            "Kerberos": {
              "doc": ""
            },
            "Ntlm": {
              "doc": ""
            }
          },
          "StandardEventKeywords": {
            "doc": "",
            "doc_formatted": {},
            "None": {
              "doc": ""
            },
            "ResponseTime": {
              "doc": ""
            },
            "WdiContext": {
              "doc": ""
            },
            "WdiDiagnostic": {
              "doc": ""
            },
            "Sqm": {
              "doc": ""
            },
            "CorrelationHint": {
              "doc": ""
            },
            "AuditFailure": {
              "doc": ""
            },
            "AuditSuccess": {
              "doc": ""
            },
            "CorrelationHint2": {
              "doc": ""
            },
            "EventLogClassic": {
              "doc": ""
            }
          },
          "StandardEventLevel": {
            "doc": "",
            "doc_formatted": {},
            "LogAlways": {
              "doc": ""
            },
            "Critical": {
              "doc": ""
            },
            "Error": {
              "doc": ""
            },
            "Warning": {
              "doc": ""
            },
            "Informational": {
              "doc": ""
            },
            "Verbose": {
              "doc": ""
            }
          },
          "StandardEventOpcode": {
            "doc": "",
            "doc_formatted": {},
            "Info": {
              "doc": ""
            },
            "Start": {
              "doc": ""
            },
            "Stop": {
              "doc": ""
            },
            "DataCollectionStart": {
              "doc": ""
            },
            "DataCollectionStop": {
              "doc": ""
            },
            "Extension": {
              "doc": ""
            },
            "Reply": {
              "doc": ""
            },
            "Resume": {
              "doc": ""
            },
            "Suspend": {
              "doc": ""
            },
            "Send": {
              "doc": ""
            },
            "Receive": {
              "doc": ""
            }
          },
          "StandardEventTask": {
            "doc": "",
            "doc_formatted": {},
            "None": {
              "doc": ""
            }
          }
        }
      }
    }
  }
}